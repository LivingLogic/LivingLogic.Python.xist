#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# XIST documentation build configuration file, created by
# sphinx-quickstart on Sun May 22 12:20:29 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import types
import re

from pygments.lexer import RegexLexer, DelegatingLexer, bygroups, words, include
from pygments.token import Comment, Text, Keyword, String, Number, Literal, \
	Name, Other, Operator
from pygments.lexers.web import HtmlLexer, XmlLexer, CssLexer, JavascriptLexer
from pygments.lexers.python import PythonLexer

from sphinx.writers import latex, html5

def visit_definition_list(self, node):
	self.body.append('\\begin{description}[style=unboxed]\n')
	if self.table:
		self.table.has_problematic = True

def visit_definition(self, node):
	self.body.append("\\hfill \\\\")

latex.LaTeXTranslator.visit_definition_list = visit_definition_list
latex.LaTeXTranslator.visit_definition = visit_definition


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = '4.1' # This fixed bug #6165 (``tab_width`` was ignored)

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
	"sphinx.ext.autodoc",
	"sphinx.ext.inheritance_diagram",
	"sphinx.ext.intersphinx",
	"sphinx.ext.viewcode",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'XIST'
copyright = '1999\N{EN DASH}2021, Walter Dörwald'
author = 'Walter Dörwald'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

# The short X.Y version.
def tag2version(tag):
	if tag.startswith("rel-"):
		tag = tag[4:]
	return tag.replace("-", ".")

shorthash = None
longhash = None
offset = None

data = os.popen("git describe --long --tags", "r").read().strip()
if data.count("-") >= 2:
	(tag, offset, identifier) = data.rsplit("-", 2)
	version = tag2version(tag)
	if offset == "0":
		offset = None
	else:
		shorthash = longhash = identifier[1:]
elif "CI_COMMIT_REF_NAME" in os.environ:
	tag = os.environ.get("CI_COMMIT_TAG", "")
	if tag:
		version = tag2version(tag)
	else:
		shorthash = os.environ.get("CI_COMMIT_SHORT_SHA", None)
		longhash = os.environ.get("CI_COMMIT_SHA", None)
		tag = os.environ.get("CI_COMMIT_REF_NAME", None)
		version = f"{tag}@{shorthash}"
else:
	version = "?"

# The full version, including alpha/beta/rc tags.
release = version
if offset is not None:
	release += f"+{offset}"
if longhash is not None:
	release += f" ({longhash})"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'livinglogic-light'

tab_width = 3

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

graphviz_output_format = "png"

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_ll_theme'

html_theme_path = ["."]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.

html_permalinks = True

if os.path.exists("sphinx_ll_theme/static/fontawesome-pro-5.13.0-web"):
	html_theme_options = {
		"font_awesome_url": "../fontawesome-pro-5.13.0-web/css/all.min.css",
		"font_awesome_style": "fal",
		"font_awesome_name": "Font Awesome 5 Pro",
		"font_awesome_weight": "400",
	}
	html_permalinks_icon = "<i class='fal fa-link'></i>"
else:
	html_theme_options = {
		"font_awesome_url": "../fontawesome-free-5.13.0-web/css/all.min.css",
		"font_awesome_style": "fas",
		"font_awesome_name": "Font Awesome 5 Free",
		"font_awesome_weight": "900",
	}
	html_permalinks_icon = "<i class='fas fa-link'></i>"

html_theme_options.update(
	pdf="XIST.pdf",
	pdf_header="PDF",
	pdf_text="This documentation as a PDF",
)

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.
# "<project> v<release> documentation" by default.
#html_title = 'XIST v?.?'

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (relative to this directory) to use as a favicon of
# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "_static/favicon.png"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# We use this to include the PDF version of the documentation
html_extra_path = ["download"]

# If not None, a 'Last updated on:' timestamp is inserted at every page
# bottom, using the given strftime format.
# The empty string is equivalent to '%b %d, %Y'.
html_last_updated_fmt = "%b %d, %Y"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
html_split_index = True

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'r', 'sv', 'tr', 'zh'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# 'ja' uses this config value.
# 'zh' user can custom change `jieba` dictionary path.
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'XISTdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
	# The paper size ('letterpaper' or 'a4paper').
	'papersize': 'a4paper',

	# The font size ('10pt', '11pt' or '12pt').
	#'pointsize': '10pt',

	# Additional stuff for the LaTeX preamble.
	'preamble':
		'\\setcounter{tocdepth}{2}\n'
		'\\usepackage{enumitem}\n'
		'\\definecolor{VerbatimBorderColor}{rgb}{1,1,1}\n'
	,

	# Latex figure (float) alignment
	#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
	(master_doc, 'XIST.tex', 'XIST Documentation', 'Walter Dörwald', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
	(master_doc, 'xist', 'XIST documentation', [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
	(master_doc, 'XIST', 'XIST documentation', author, 'XIST', 'Extensible HTML/XML generator, cross-platform templating language, Oracle utilities and various other tools.', 'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
	'python': ('https://docs.python.org/3.8', None),
	'requests': ('https://docs.python-requests.org/en/master/', None),
}

autoclass_content = "class"

autodoc_default_options = {
	"members": True,
	"special-members": True,
	"inherited-members": False,
	"show-inheritance": True,
	"show-inheritance-diagram": True,
	"inherit-docstrings": False,
	"member-order": "bysource",
	"ignore-module-all": True,
	"undoc-members": False,
}

autodoc_typehints = "signature"
autodoc_class_signature = "separated"


def autodoc_skip_member(app, what, name, obj, skip, options):
	exclusions = {
		'__weakref__', '__slots__', # special-members
		'__doc__', '__module__', '__dict__',  # undoc-members
		'ul4_type' # our own special attribute
	}
	doc = getattr(obj, "__doc__", None)
	if skip:
		return True
	elif name in exclusions:
		return True
	elif name in dir(object) and doc == getattr(object, name).__doc__:
		return True
	elif not doc or doc == getattr(type(obj), "__doc__", None):
		return True
	return False


class HTML5Translator(html5.HTML5Translator):
	pass


class UL4Lexer(RegexLexer):
	"""
	Generic lexer for UL4.

	.. versionadded:: 2.12
	"""

	flags = re.MULTILINE | re.DOTALL

	name = 'UL4'
	aliases = ['ul4']
	filenames = ['*.ul4']

	tokens = {
		"root": [
			(
				# Template header without name:
				# ``<?ul4?>``
				r"(<\?)(\s*)(ul4)(\s*)(\?>)",
				bygroups(Comment.Preproc, Text.Whitespace, Keyword, Text.Whitespace, Comment.Preproc),
			),
			(
				# Template header with name (potentially followed by the signature):
				# ``<?ul4 foo(bar=42)?>``
				r"(<\?)(\s*)(ul4)(\s*)([a-zA-Z_][a-zA-Z_0-9]*)?\b",
				bygroups(Comment.Preproc, Text.Whitespace, Keyword, Text.Whitespace, Name.Function),
				"ul4", # Switch to "expression" mode
			),
			(
				# Comment:
				# ``<?note foobar?>``
				r"<\?\s*note\s+.*?\?>",
				Comment,
			),
			(
				# Template documentation:
				# ``<?doc foobar?>``
				r"<\?\s*doc\s+.*?\?>",
				String.Doc,
			),
			(
				# ``<?ignore?>`` tag for commenting out code:
				# ``<?ignore?>...<?end ignore?>``
				r"<\?\s*ignore\s*\?>",
				Comment,
				"ignore", # Switch to "ignore" mode
			),
			(
				# ``<?def?>`` tag for defining local templates
				# ``<?def foo(bar=42)?>...<?end def?>``
				r"(<\?)(\s*)(def)(\s*)([a-zA-Z_][a-zA-Z_0-9]*)?\b",
				bygroups(Comment.Preproc, Text.Whitespace, Keyword, Text.Whitespace, Name.Function),
				"ul4", # Switch to "expression" mode
			),
			(
				# The rest of the supported tags
				r"(<\?)(\s*)(printx|print|for|if|elif|else|while|code|renderblocks?|render)\b",
				bygroups(Comment.Preproc, Text.Whitespace, Keyword),
				"ul4", # Switch to "expression" mode
			),
			(
				# ``<?end?>`` tag for ending ``<?def?>``, ``<?for?>``,
				# ``<?if?>``, ``<?while?>``, ``<?renderblock?>`` and
				# ``<?renderblocks?>`` blocks.
				r"(<\?)(\s*)(end)\b",
				bygroups(Comment.Preproc, Text.Whitespace, Keyword),
				"end", # Switch to "end tag" mode
			),
			(
				# ``<?whitespace?>`` tag for configuring whitespace handlng
				r"(<\?)(\s*)(whitespace)\b",
				bygroups(Comment.Preproc, Text.Whitespace, Keyword),
				"whitespace", # Switch to "whitespace" mode
			),
			# Plain text
			(r"[^<]+", Other),
			(r"<", Other),
		],
		# Ignore mode ignores everything upto the matching ``<?end ignore?>`` tag
		"ignore": [
			# Nested ``<?ignore?>`` tag
			(r"<\?\s*ignore\s*\?>", Comment, "#push"),
			# ``<?end ignore?>`` tag
			(r"<\?\s*end\s+ignore\s*\?>", Comment, "#pop"),
			# Everything else
			(r"[^<]+", Comment),
			(r".", Comment),
		],
		# UL4 expressions
		"ul4": [
			# End the tag
			(r"\?>", Comment.Preproc, "#pop"),
			# Start triple quoted string constant
			("'''", String, "string13"),
			('"""', String, "string23"),
			# Start single quoted string constant
			("'", String, "string1"),
			('"', String, "string2"),
			# Floating point number
			(r"\d+\.\d*([eE][+-]?\d+)?", Number.Float),
			(r"\.\d+([eE][+-]?\d+)?", Number.Float),
			(r"\d+[eE][+-]?\d+", Number.Float),
			# Binary integer: ``0b101010``
			(r"0[bB][01]+", Number.Bin),
			# Octal integer: ``0o52``
			(r"0[oO][0-7]+", Number.Oct),
			# Hexadecimal integer: ``0x2a``
			(r"0[xX][0-9a-fA-F]+", Number.Hex),
			# Date or datetime: ``@(2000-02-29)``/``@(2000-02-29T12:34:56.987654)``
			(r"@\(\d\d\d\d-\d\d-\d\d(T(\d\d:\d\d(:\d\d(\.\d{6})?)?)?)?\)", Literal.Date),
			# Color: ``#fff``, ``#fff8f0`` etc.
			(r"#[0-9a-fA-F]{8}", Literal.Color),
			(r"#[0-9a-fA-F]{6}", Literal.Color),
			(r"#[0-9a-fA-F]{3,4}", Literal.Color),
			# Decimal integer: ``42``
			(r"\d+", Number.Integer),
			# Operators
			(r"//|==|!=|>=|<=|<<|>>|\+=|-=|\*=|/=|//=|<<=|>>=|&=|\|=|^=|=|[\[\]{},:*/().~%&|<>^+-]", Operator),
			# Keywords
			(words(("for", "in", "if", "else", "not", "is", "and", "or"), suffix=r"\b"), Keyword),
			# Builtin constants
			(words(("None", "False", "True"), suffix=r"\b"), Keyword.Constant),
			# Variable names
			(r"[a-zA-Z_][a-zA-Z0-9_]*", Name),
			# Whitespace
			(r"\s+", Text.Whitespace),
		],
		# ``<?end ...?>`` tag for closing the last open block
		"end": [
			(r"\?>", Comment.Preproc, "#pop"),
			(words(("for", "if", "def", "while", "renderblock", "renderblocks"), suffix=r"\b"), Keyword),
			(r"\s+", Text),
		],
		# Content of the ``<?whitespace ...?>`` tag:
		# ``keep``, ``string`` or ``smart``
		"whitespace": [
			(r"\?>", Comment.Preproc, "#pop"),
			(words(("keep", "strip", "smart"), suffix=r"\b"), Comment.Preproc),
			(r"\s+", Text.Whitespace),
		],
		# Inside a string constant
		"stringescapes": [
			(r"""\\[\\'"abtnfr]""", String.Escape),
			(r"\\x[0-9a-fA-F]{2}", String.Escape),
			(r"\\u[0-9a-fA-F]{4}", String.Escape),
			(r"\\U[0-9a-fA-F]{8}", String.Escape),
		],
		# Inside a triple quoted string started with ``'''``
		"string13": [
			(r"'''", String, "#pop"),
			include("stringescapes"),
			(r"[^\\']+", String),
			(r'.', String),
		],
		# Inside a triple quoted string started with ``"""``
		"string23": [
			(r'"""', String, "#pop"),
			include("stringescapes"),
			(r'[^\\"]+', String),
			(r'.', String),
		],
		# Inside a single quoted string started with ``'``
		"string1": [
			(r"'", String, "#pop"),
			include("stringescapes"),
			(r"[^\\']+", String),
			(r'.', String),
		],
		# Inside a single quoted string started with ``"``
		"string2": [
			(r'"', String, "#pop"),
			include("stringescapes"),
			(r'[^\\"]+', String),
			(r'.', String),
		],
	}

class HTMLUL4Lexer(DelegatingLexer):
	"""
	Lexer for UL4 embedded in HTML.
	"""

	name = 'HTML+UL4'
	aliases = ['html+ul4']
	filenames = ['*.htmlul4']

	def __init__(self, **options):
		super().__init__(HtmlLexer, UL4Lexer, **options)


class XMLUL4Lexer(DelegatingLexer):
	"""
	Lexer for UL4 embedded in XML.
	"""

	name = 'XML+UL4'
	aliases = ['xml+ul4']
	filenames = ['*.xmlul4']

	def __init__(self, **options):
		super().__init__(XmlLexer, UL4Lexer, **options)


class CSSUL4Lexer(DelegatingLexer):
	"""
	Lexer for UL4 embedded in CSS.
	"""

	name = 'CSS+UL4'
	aliases = ['css+ul4']
	filenames = ['*.cssul4']

	def __init__(self, **options):
		super().__init__(CssLexer, UL4Lexer, **options)


class JavascriptUL4Lexer(DelegatingLexer):
	"""
	Lexer for UL4 embedded in Javascript.
	"""

	name = 'Javascript+UL4'
	aliases = ['js+ul4']
	filenames = ['*.jsul4']

	def __init__(self, **options):
		super().__init__(JavascriptLexer, UL4Lexer, **options)


class PythonUL4Lexer(DelegatingLexer):
	"""
	Lexer for UL4 embedded in Python.
	"""

	name = 'Python+UL4'
	aliases = ['py+ul4']
	filenames = ['*.pyul4']

	def __init__(self, **options):
		super().__init__(PythonLexer, UL4Lexer, **options)


def setup(app):
	app.require_sphinx("4.1")
	app.connect('autodoc-skip-member', autodoc_skip_member)
	app.set_translator("html", HTML5Translator, True)
	app.add_lexer("ul4", UL4Lexer)
	app.add_lexer("html+ul4", HTMLUL4Lexer)
	app.add_lexer("xml+ul4", XMLUL4Lexer)
	app.add_lexer("css+ul4", CSSUL4Lexer)
	app.add_lexer("js+ul4", JavascriptUL4Lexer)
	app.add_lexer("py+ul4", PythonUL4Lexer)
