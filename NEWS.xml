<?xml version='1.0' encoding='utf-8'?>
<section><h>Changes in 3.1 (released 01/18/2008)</h>
<ul>
<li>Fixed the problem that the source distibution didn't include header files.</li>
<li>If an <class>URLAttr</class> attribute contains a processing instruction
&xist; will no longer transform the &url; in any way.</li>
<li>Fixed a parser bug, where attributes were dropped when the attribute
value was empty.</li>
<li>Putting a module into a <class>Pool</class> object now copies the
<lit>xmlns</lit> attribute too. This makes it possible to use <class>Pool</class>
objects as conversion targets.</li>
</ul>
</section>


<section><h>Changes in 3.0 (released 01/07/2008)</h>
<ul>
<li>Namespaces have been greatly simplified. There are no namespace modules any
longer. An element class can be assigned a namespace by setting the <lit>xmlns</lit>
class attribute to the namespace name. Global attributes can be assigned a
namespace by setting the <lit>xmlns</lit> attribute on the attribute class itself
(<em>not</em> on the <class>Attrs</class> class). The classes <class>Prefixes</class>
and <class>NSPool</class> are gone too. Instead a new class <class>Pool</class>
is used to specify which classes should be used for parsing.
</li>

<li>Dependency on <a href="http://pyxml.sf.net/">PyXML</a> has finally
been dropped. &xist; now uses its own &xml; parsing &api;. Two parsers
are available: One based on <a href="http://expat.sourceforge.net/">expat</a>
and one based on a custom version of
<a href="http://effbot.org/zone/sgmlop-index.htm">sgmlop</a>.</li>

<li>Tree traversal has been rewritten again. XFind expressions involving
multiple uses of <lit>//</lit> now work correctly. The method <meth>walk</meth>
now doesn't yield <class>Cursor</class> objects, but simple path lists
(actually it's always the same list, if you want distinct lists use
<meth>walkpath</meth>). Applying XFind expressions to nodes directly
is no longer supported, you have to call <meth>walk</meth>,
<meth>walknode</meth> or <meth>walkpath</meth> with the XFind
expression instead. Many XFind operators have been renamed and/or reimplemented
(see the documentation for the <mod>xfind</mod> module for more
information).</li>

<li><p>The methods <meth>__getitem__</meth>, <meth>__setitem__</meth>
and <meth>__delitem__</meth> for <class>Frag</class> and <class>Element</class>
now support the new walk filters, so you can do:</p>
<ul>
<li><lit>del node[html.p]</lit> to delete all <class>html.p</class> child elements
of <lit>node</lit>;</li>
<li><lit>del node[html.p[2]]</lit> to delete only the third
<class>html.p</class>;</li>
<li><lit>node[xfind.hasclass("note")] = html.p("There was a note here!")</lit> to
replace several child nodes with a new one;</li>
<li><lit>for c in node[xfind.empty]: print c.bytes()</lit> to print all
empty (element) children of <lit>node</lit>;</li>
<li><lit>del node[node[0]]</lit> to delete the first child node (which is
silly, but illustrates that you can pass a node to get/replace/delete
that node);</li>
</ul>
</li>

<li><p>A new module <mod>ll.xist.css</mod> has been added which contains
&css; related functionality: The generator function <func>iterrules</func>
can be passed an &xist; tree and it will produce all &css; rules defined in any
<class>html.link</class> or <class>html.style</class> elements or imported by them
(via the &css; rule <lit>@import</lit>). This requires the
<a href="http://cheeseshop.python.org/pypi/cssutils"><mod>cssutils</mod></a>
package.</p>

<p>The function <func>applystylesheets</func> modifies the &xist; tree passed in
by removing all &css; (from <class>html.link</class> and <class>html.style</class>
elements and their <lit>@import</lit>ed stylesheets) and putting the styles into
<lit>style</lit> attributes of the affected elements instead.</p>

<p>The function <func>selector</func> return a tree walk filter from a &css;
selector passed as a string.</p>
</li>

<li>
<p>Constructing trees can now be done with <lit>with</lit> blocks. Code looks
like this:</p>
<prog>
with xsc.Frag() as node:
	+xml.XML()
	+html.DocTypeXHTML10transitional()
	with html.html():
		with html.head():
			+meta.contenttype()
			+html.title("Example page")
		with html.body():
			+html.h1("Welcome to the example page")
			with html.p():
				+xsc.Text("This example page has a link to the ")
				+html.a("Python home page", href="http://www.python.org/")
				+xsc.Text(".")

print node.conv().bytes(encoding="us-ascii")
</prog>
<p>Also the function <func>xsc.append</func> has been renamed to
<func>add</func> and supports <lit>with</lit> blocks now instead of
<a href="http://codespeak.net/svn/user/hpk/talks/xpython-talk.txt">XPython</a>.</p>
</li>

<li>A subset of <a href="http://docutils.sourceforge.net/rst.html">ReST</a>
is supported now for docstrings when using the <mod>ll.xist.ns.doc</mod>
module. The module attribute <lit>__docformat__</lit> is now honored (Set it
to <lit>"xist"</lit> to get &xist; docstrings).</li>

<li>Many classes in the <mod>ll.xist.ns.doc</mod> have been renamed
to more familiar names (from &html;, &xhtml; 2 or ReST).</li>

<li>The <lit>media</lit> attribute of <class>html.link</class> and
<class>html.style</class> now has a method <meth>hasmedia</meth>.</li>

<li>The node method <meth>asBytes</meth> has been renamed to
<meth>bytes</meth> and <meth>bytes</meth> has been renamed to
<meth>iterbytes</meth>.</li>

<li>The node method <meth>asString</meth> has been renamed to
<meth>string</meth> and a new method <meth>iterstring</meth> has been
added.</li>

<li><class>ll.xist.ns.xml.XML10</class> is gone now. Use
<class>ll.xist.ns.xml.XML</class> instead.</li>

<li><func>xsc.tonode</func> now will raise an exception when it
can't handle an argument instead of issuing a warning.</li>

<li>A class attribute <lit>empty</lit> inside element classes will now no
longer get converted into <lit>model</lit>.</li>

<li><class>ll.xist.ns.doc.pyref</class> now copes better with decorated
methods.</li>

<li>The deprecated <class>Element</class> methods <meth>hasAttr</meth>,
<meth>hasattr</meth>, <meth>isallowedattr</meth>, <meth>getAttr</meth>,
<meth>getattr</meth>, <meth>setDefaultAttr</meth>,
<meth>setdefaultattr</meth>, <meth>attrkeys</meth>,
<meth>attrvalues</meth>, <meth>attritems</meth>,
<meth>iterattrkeys</meth>, <meth>iterattrvalues</meth>,
<meth>iterattritems</meth>, <meth>allowedattrkeys</meth>,
<meth>allowedattrvalues</meth>, <meth>allowedattritems</meth>,
<meth>iterallowedattrkeys</meth>, <meth>iterallowedattrvalues</meth>,
<meth>iterallowedattritems</meth> and <meth>copyDefaultAttrs</meth>
have been removed. The deprecated <class>Attrs</class> method
<meth>copydefaults</meth> has been removed too.</li>

<li>The namespace module <mod>ll.xist.ns.cond</mod> has been removed.</li>

<li>When calling the function <func>ll.xist.parsers.parseURL</func>
the arguments <arg>headers</arg> and <arg>data</arg> are now passed along
to the parser's method only if they are specified. This makes it possible to
pass ssh &url;s to <func>ll.xist.parsers.parseURL</func>.</li>

<li>The methods <meth>withnames</meth> and <meth>withoutnames</meth> have
been split into two that take Python names and two that take XML names.
Multiple arguments are used now (instead of one argument that must be a sequence).
Passing a namespace to remove all attributes from the namespace is no longer supported.</li>

<li>The <class>Attrs</class> methods <meth>updatenew</meth> and
<meth>updatexisting</meth> have been removed.</li>

</ul>
</section>


<section><h>Changes in 2.15.5 (released 07/17/2007)</h>

<ul>
<li>The Python quotes example no longer contains the &xml; source
or the generated &html;.</li>
</ul>


<section><h>Changes in 2.15.4 (released 07/16/2007)</h>
<ul>
<li>The Python quotes example now always parses the file from
the original &url;.</li>
<li>The Python quotes and the media example now print the result
to <lit>stdout</lit>.</li>
</ul>
</section>


<section><h>Changes in 2.15.3 (released 07/16/2007)</h>
<ul>
<li>Use a consistent license (MIT) everywhere. This should make
&xist; Debian compatible.</li>
<li>Change the Python quotes example, so that it works even if
there's no <filename>python-quotes.xml</filename> in the current
directory.</li>
</ul>
</section>


<section><h>Changes in 2.15.2 (released 01/24/2007)</h>
<ul>
<li>Fixed a bug in <meth>presenters.CodePresenter.__str__</meth>.</li>
<li>Fixed base URL handling for tidy parsing.</li>
<li>Updated examples.</li>
<li>Updated <func>xiter</func> and <func>xattrs</func>
implementations for <class>Node</class> and <class>Namespace</class> to
conform to the newest version of IPython.</li>
</ul>
</section>


<section><h>Changes in 2.15.1 (released 09/25/2006)</h>
<ul>
<li>Fixed a few bugs in the <mod>sgmlop</mod> function declarations.</li>
<li>Readded the spacer pixel.</li>
</ul>
</section>


<section><h>Changes in 2.15 (released 09/24/2006)</h>
<ul>
<li>&xist; has been made compatible with Python 2.5: Code has been updated
to use the proper C API for memory management and <a href="http://www.python.org/dev/peps/pep-0353/">PEP 353</a>
support has been added. &xist; now includes its own fixed version of <mod>sgmlop</mod>.</li>
<li>The <class>ll.xist.xsc.Attrs</class> methods <meth>with</meth> and
<meth>without</meth> have been renamed to <meth>withnames</meth> and
<meth>withoutnames</meth> for Python 2.5 compatibility.</li>
<li><class>ll.xist.ns.htmlspecials.pixel</class> no longer handles colors
via different GIFs. It uses the <lit>background-color</lit> in the <lit>style</lit>
attribute instead. The same change has been implemented for
<class>ll.xist.ns.htmlspecials.autopixel</class>. It's now possible to overwrite
the default <lit>src</lit> attribute value of <lit>root:px/spc.gif</lit> either
via the &xml; attribute or via the converter context.</li>
<li>The node method <meth>asText</meth> has been made a function, moved
into the <mod>html</mod> namespace and renamed to <func>astext</func>.
Furthermore <app moreinfo="http://elinks.or.cz/">elinks</app> is used for plain text
formatting now instead of <app moreinfo="http://w3m.sourceforge.net/">w3m</app>.</li>
</ul>
</section>


<section><h>Changes in 2.14.2 (released 07/04/2006)</h>
<ul>
<li>Fixed a bug in the <meth>presentAttr</meth> method of
<class>ll.xist.presenters.TreePresenter</class>.</li>
</ul>
</section>


<section><h>Changes in 2.14.1 (released 06/29/2006)</h>
<ul>
<li>Fixed a bug in the <meth>presentEntity</meth> method of
<class>ll.xist.presenters.CodePresenter</class>.</li>
<li>Updated installation instructions.</li>
</ul>
</section>


<section><h>Changes in 2.14 (released 06/28/2006)</h>
<ul>
<li>Namespaces for RSS 0.91, RSS 2.0 and Atom 1.0 have been added.</li>

<li>A new namespace <mod>ll.xist.ns.detox</mod> has been added that
is similar to <mod>ll.toxic</mod> but can be used to generate Python
code instead of PL/SQL code. Using <mod>detox</mod> templates is about
50 times faster than using &xist; trees directly and about 10 times faster than
<a href="http://kid.lesscode.org/">Kid</a>.</li>

<li>Presenters are now compatible to <a href="http://ipython.scipy.org/">IPython</a>'s
ipipe module. This means that you can browse &xist; trees interactively
if you have IPython installed. <class>NormalPresenter</class> and the
<class>Node</class> methods <meth>repr</meth> and <meth>asrepr</meth>
have been removed.</li>

<li>A new processing instruction <class>ll.xist.ns.specials.url</class>
has been added that does the same &url; transformation as
<class>ll.xist.xsc.URLAttr</class> does.</li>

<li>On publishing <class>ll.xist.ns.html.html</class> now only adds a
<lit>lang</lit> and <lit>xml:lang</lit> attribute, if neither of them exists.</li>

<li><mod>setuptools</mod> is now supported for installation.</li>
</ul>
</section>


<section><h>Changes in 2.13 (released 10/31/2005)</h>
<ul>
<li><meth>ll.xist.xsc.Namespace.tokenize</meth> requires a
<class>unicode</class> object as input now. This makes it possible
to use encodings that are not ASCII compatible (such as UTF-16).
The <arg>encoding</arg> argument is gone.</li>

<li><meth>ll.xist.xsc.Node.asString</meth> uses the <arg>encoding</arg>
argument to determine which characters have to be output as character references
now. (You'll still get a unicode object as the result.)</li>

<li>A new processing instruction class <class>ll.xist.ns.specials.literal</class>
has been added, that will output its content literally when published. This
can be used for embedding preformatted &xml; (e.g. from a database) into an
XIST tree.</li>
</ul>

</section>


<section><h>Changes in 2.12 (released 10/13/2005)</h>
<ul>
<li>Namespaces for <a href="http://www.relaxng.org/">Relax NG</a> and
<a href="http://kid.lesscode.org/">Kid</a> have been added.</li>

<li>&xist; requires version 1.0 of the core package now.</li>

<li>The class name for the DocBook &dtd; class has been fixed.</li>

</ul>

</section>


<section><h>Changes in 2.11 (released 07/29/2005)</h>
<ul>
<li>A script <filename>xml2xsc.py</filename> has been added, that
can be used to parse an &xml; file and generate a rudimentary &xist; namespace
from it.</li>

<li>A <class>DocType</class> for XHTML 1.1 has been added
(suggested by Elvelind Grandin).</li>

<li>Line number information is now added when parsing &html;.</li>

<li>The <meth>sorted</meth> method now supports the same arguments
(<arg>cmp</arg>, <arg>key</arg> and <arg>reverse</arg>) as
<meth>list.sort</meth> and <func>sorted</func> in Python 2.4.</li>

<li>The <meth>walk</meth> doesn't yield the node directly, but yields
a <class>Cursor</class> object now, with has several ways of referencing the node.</li>

<li>New methods <meth>walknode</meth>, <meth>walkpath</meth> and
<meth>walkindex</meth> have been added.</li>

<li>Presenters use an iterator &api; instead of a stream &api; now. Dumping
an &xml; tree presentation to the terminal can now start immediately instead
of having to wait for the complete string to be formatted.</li>

<li>Fixed a bug with element/attribute names that contained a <lit>.</lit>
character. (This broke <mod>ll.xist.ns.fo</mod>.)</li>

<li>Fixed a bug with <lit>xmlns</lit> attributes in nested elements.
When an element ended the parser restored the wrong prefix mapping.</li>

<li>The <dirname>python-quotes</dirname> demo has been updated to use the
current version of AMK's &xml; file.</li>

<li>Removed iterator stuff from <mod>ll.xist.xfind</mod>, as this
is now part of the <mod>ll</mod> package/module.</li>

<li>The function <func>ToNode</func> has been renamed to
<func>tonode</func>.</li>

<li><class>ll.xist.Context</class> no longer subclasses <class>list</class>.</li>

<li><class>ll.xist.ns.doc.explain</class> will now try to output the objects
in the order in which they appear in the Python source.</li>

<li>The node methods <meth>find</meth> and <meth>findfirst</meth>
have been removed.</li>

<li><mod>ll.xist.ns.cond</mod> now uses a sandbox dictionary in a
converter context for evaluating expression.</li>
</ul>
</section>


<section><h>Changes in 2.10 (released 05/20/2005)</h>
<ul>
<li>The content of the processing instruction <class>ll.xist.ns.code.pyexec</class>
will not be executed at construction time, but at conversion time. The code
in <class>ll.xist.ns.code.pyexec</class> or <class>ll.xist.ns.code.pyeval</class>
will no longer be executed in the <mod>ll.xist.sandbox</mod> module
(which has been removed), but in a sandbox dictionary in the converter context
of the <mod>ll.xist.ns.code</mod> namespace.</li>

<li>The tests have been ported to <a href="http://codespeak.net/py/current/doc/test.html">py.test</a>.</li>

<li>The method <meth>mapped</meth> is now callable without arguments.
In this case a converter will be created on the fly. You can pass constructor
arguments for this converter to <meth>mapped</meth> as keyword arguments.</li>

<li>The publishing &api; has changed again: <meth>ll.xist.publishers.Publisher.publish</meth>
no longer accepts an argument <arg>stream</arg> to which the byte strings are
written, but it is a generator now. The publisher methods <meth>write</meth>
and <meth>writetext</meth> have been renamed to <meth>encode</meth> and
<meth>encodetext</meth> and return the encoded byte string, instead of
writing it directly to the stream. There's a new generator method
<meth>bytes</meth> for nodes now, which can be passed the same arguments
as <meth>asBytes</meth>. These changes should help when using
&xist; in &wsgi; applications.</li>

<li>The iterator returned from <meth>Element.__getitem__</meth>,
<meth>Frag.__getitem__</meth> and the <meth>walk</meth> method
now supports <meth>__getitem__</meth> itself, so you can write
<lit><rep>table</rep>[html.tr][0]</lit> to get the first row from a table or
<lit><rep>page</rep>.walk(xsc.FindTypeAll(html.td))[-1]</lit> to get the last table cell
from a complete &html; page.</li>

<li>Several bugs in the namespaces <mod>ll.xist.ns.meta</mod>,
<mod>ll.xist.ns.form</mod> and
<mod>ll.xist.ns.specials</mod> have been fixed.</li>
<li>The namespace modules <mod>ll.xist.ns.css</mod> and
<mod>ll.xist.ns.cssspecials</mod> have been removed.</li>
</ul>
</section>


<section><h>Changes in 2.9 (released 04/21/2005)</h>
<ul>
<li>&xist; trees can now be pickled. The only restriction is that global
attributes must come from a namespace that has been turned into a module
via <meth>makemod</meth>, so that this module can be imported on
unpickling.</li>

<li><p>Two arguments of the <meth>walk</meth> method have been renamed:
<arg>filtermode</arg> has been renamed to <arg>inmode</arg> and <arg>walkmode</arg>
has been renamed to <arg>outmode</arg>. For these modes two new values are
supported:</p>
<dl>
<dt><lit>ll.xist.xsc.walkindex</lit></dt><dd>The value passed to the filter
function or yielded from the iterator is a list containing child indizes and
attribute names that specify the path to the node in question.</dd>
<dt><lit>ll.xist.xsc.walkrootindex</lit></dt><dd>The filter function
will be called with two arguments: The first is the root node of the tree (i.e.
the node for which <meth>walk</meth> has been called), the second one is
an index path (just like for <lit>ll.xist.xsc.walkindex</lit>). If used as
an <arg>outmode</arg> a tuple with these two values will be yielded.</dd>
</dl>
</li>
<li><p>Attribute mappings now support <meth>__getitem__</meth>,
<meth>__setitem__</meth> and <meth>__delitem__</meth> with list
arguments, i.e. you can do:</p>
<prog>
<prompt>&gt;&gt;&gt; </prompt><input>from ll.xist.ns import html</input>
<prompt>&gt;&gt;&gt; </prompt><input>e = html.a("gurk", href=("hinz", "kunz"))</input>
<prompt>&gt;&gt;&gt; </prompt><input>print e.attrs[["href", 0]]</input>
hinz
<prompt>&gt;&gt;&gt; </prompt><input>e.attrs[["href", 0]] = "hurz"</input>
<prompt>&gt;&gt;&gt; </prompt><input>print e["href"]</input>
hurzkunz
<prompt>&gt;&gt;&gt; </prompt><input>del e.attrs[["href", 0]]</input>
<prompt>&gt;&gt;&gt; </prompt><input>print e["href"]</input>
kunz
</prog>
</li>
<li><p>&xml; attributes can now be accessed as Python attributes, i.e.</p>
<prog>
<prompt>&gt;&gt;&gt; </prompt><input>from ll.xist.ns import html</input>
<prompt>&gt;&gt;&gt; </prompt><input>e = html.a("spam", href="eggs")</input>
<prompt>&gt;&gt;&gt; </prompt><input>print e.attrs.href</input>
eggs
</prog>
<p>(Don't confuse this with <lit>e.Attrs.href</lit> which is the
attribute class.)</p>
</li>

<li><class>Frag</class> and <class>Element</class> now support <class>Node</class>
subclasses as arguments to their <meth>__getitem__</meth> method: An iterator
for all children of the specified type will be returned.</li>

<li>The encoding used for parsing now defaults to <lit>None</lit>. When
reading from an &url; and no default encoding has been specified the one
from the <lit>Content-Type</lit> header will be used. If this still doesn't
result in a usable encoding, <lit>"utf-8"</lit> will be used when parsing &xml;
and <lit>"iso-8859-1"</lit> will be used when parsing broken &html;.</li>

<li>All error and warning classes from <mod>ll.xist.errors</mod>
have been merged into <mod>ll.xist.xsc</mod>. This avoids import
problems with circular imports.</li>

<li>The attributes <lit>showLocation</lit> and <lit>showPath</lit>
of <class>ll.xist.presenters.TreePresenter</class> have been lowercased and
presenters are properly reset after they've done their job.</li>

<li>The class attribute <lit>xmlname</lit> will no longer be turned into a list
containing the Python and the &xml; name, but will be the &xml; name only. You
can get the Python name from <lit><rep>foo</rep>.__class__.__name__</lit>.</li>

<li><class>DeprecationWarning</class>s for <lit>name</lit> and
<lit>attrHandlers</lit> have finally been removed.</li>

<li>Instances of <class>ll.xist.xsc.Entity</class> subclasses can now be
compared. <meth>__eq__</meth> simply checks if the objects are instances
of the same class.</li>
</ul>
</section>


<section><h>Changes in 2.8.1 (released 03/22/2005)</h>
<ul>
<li>Added a note about the package init file to the installation
documentation.</li>
</ul>
</section>


<section><h>Changes in 2.8 (released 01/03/2005)</h>
<ul>
<li>&xist; requires Python 2.4 now.</li>

<li><class>ll.xist.ns.specials.x</class> has been renamed to
<class>ll.xist.ns.specials.ignore</class>.</li>

<li><class>ll.xist.utils.findAttr</class> has been renamed to
<class>ll.xist.utils.findattr</class>.</li>

<li><class>ll.xist.xfind.item</class> no longer handles slices.</li>

<li>XFind has been enhanced to support item and slice operators, i.e.
if <lit><rep>foo</rep></lit> is an XFind operator, <lit><rep>foo</rep>[0]</lit>
is an operator that will produce the first node from <lit><rep>foo</rep></lit>
(if there is one). Negative values and slices are supported too.</li>

<li>Operators can be chained via division: <lit>html.a/html.b</lit> is an
operator that can be passed around and applied to a node.</li>

<li>&xist; requires the new core module and makes use of the new
<z>cooperative displayhook</z> functionality defined there: If you install
the displayhook you can tweak or replace <lit>ll.xist.presenters.hookpresenter</lit>
to change the output.</li>
</ul>
</section>


<section><h>Changes in 2.7 (released 11/24/2004)</h>
<ul>
<li>The transparent pixel used by <class>ll.xist.ns.htmlspecials.pixel</class>
has been renamed to <filename>spc.gif</filename> to avoid problems with IE.</li>
<li>Removed a debug print in <class>ll.xist.xfind.Finder.__getitem__</class>.</li>
<li><mod>ll.xist.xfind</mod> now has a new function <func>item</func>,
that can be used to get a certain item or slice from an iterator.
<func>xfind.first</func> and <func>xfind.last</func> have been
changed to use <func>xfind.item</func>, so you now have to pass a
default value to get the old behaviour.</li>
<li>Obsolete options in <mod>ll.xist.options</mod> have been removed
(and <lit>reprEncoding</lit> has been renamed to <lit>reprencoding</lit>).</li>
</ul>
</section>


<section><h>Changes in 2.6.2 (released 06/06/2005)</h>
<ul>
<li>Fixed a bug in <meth>ll.xist.parsers.Parser.parse</meth>.</li>
</ul>
</section>


<section><h>Changes in 2.6.1 (released 11/02/2004)</h>
<ul>
<li>Fixed a bug in <meth>ll.xist.xfind.Finder.__floordiv__</meth>.</li>
<li>Restricted characters as defined in
<a href="http://www.w3.org/TR/2004/REC-xml11-20040204/#NT-RestrictedChar">&xml; 1.1</a>
will now be published as character references.</li>
</ul>
</section>


<section><h>Changes in 2.6 (released 10/26/2004)</h>
<ul>
<li><func>ToNode</func> now tries iterating through the
value passed in, so it's now possible to pass iterators and generators
(and generator expressions in Python 2.4) to <class>Frag</class>
and <class>Element</class> constructors.</li>

<li><p>A new &api; named XFind has been added for iterating through &xml;
trees. XFind expressions look somewhat like XPath expressions but are pure
Python expressions. For example finding all images inside links in an &html;
page can be done like this:</p>
<example><h>Finding linked images with XFind</h>
<prog>
from ll.xist import parsers, xfind
from ll.xist.ns import html
node = parsers.parseURL("http://www.python.org/", tidy=True)
for img in node//html.a/html.img:
	print img["src"]
</prog>
</example>

<p>The module <mod>ll.xist.xfind</mod> contains several operators
that can be used in XFind expressions.</p>
</li>

<li>Parsing broken &html; is now done with the &html; parser from
<a href="http://www.xmlsoft.org/">libxml2</a>. The parsing functions
no longer accept options for tidy, only the boolean value of the <arg>tidy</arg>
argument is used.</li>

<li>The publishing &api; has been simplified: Publication can now be done with
a call to <meth>ll.xist.publishers.Publisher.publish</meth>, passing in a
<class>ll.xist.xsc.Node</class>. Writing strings to the publisher output is
now done with <meth>ll.xist.publishers.Publisher.write</meth>. The methods
<meth>beginPublication</meth> and <meth>endPublication</meth> have been
removed.</li>

<li>The presentation &api; has been simplified in the same way: You'll get a
presentation by calling: <lit>string = <rep>presenter</rep>.present(<rep>node</rep>)</lit>.
The methods <meth>beginPresentation</meth> and <meth>endPresentation</meth>
have been removed.</li>

<li>The parser now has the option to ignore illegal elements, attributes,
processing instructions and entities. The default behaviour is to raise an
exception, but this can now be reconfigured via Python's warning framework.</li>

<li>The classmethod <meth>tokenize</meth> from <mod>ll.toxic</mod>
has been moved to <class>ll.xist.xsc.Namespace</class>, so it's now possible
to tokenize an &xml; string for other processing instructions as well.</li>

<li>A new class <class>ll.xist.xsc.NSPool</class> has been added.
An <class>NSPool</class> contains a pool of namespaces from which the parser
selects the appropriate namespace once an <lit>xmlns</lit> attribute is
encountered.</li>

<li>The script <filename>xscmake.py</filename> (which has been unmaintained
for a while now) has been removed.</li>

<li>Elements <class>hostname</class>, <class>tty</class>, <class>prompt</class>
and <class>input</class> were add to <mod>ll.xist.ns.doc</mod>.</li>

<li>The method <meth>ll.xist.xsc.Attrs.set</meth> now returns the
new attribute object.</li>

<li>The <meth>visit</meth> method has been removed.</li>

<li><meth>ll.xist.xsc.FindOld</meth> has been removed.</li>

<li><class>ll.xist.ns.xml.header</class> has been renamed to
<class>ll.xist.ns.xml.declaration</class>.</li>

</ul>

</section>


<section><h>Changes in 2.5 (released 06/30/2004)</h>
<ul>

<li>Specifying content models for elements has seen major enhancements. The
boolean class attribute <lit>empty</lit> has been replaced by an object
<lit>model</lit> whose <meth>checkvalid</meth> method will be called
for validating the element content.</li>

<li>A new module <mod>ll.xist.sims</mod> has been added that provides
a simple schema validation. Schema violations will be reported via Pythons
warning framework.</li>

<li>All namespace modules have been updated to use <mod>sims</mod>
information. The &svg; module has been updated to &svg; 1.1. The docbook
module has been updated to DocBook 4.3.</li>

<li>It's possible to switch off validation during parsing and publishing.</li>

<li><p><class>ll.xist.xsc.Frag</class> and <class>ll.xist.xsc.Element</class>
both have a <meth>__call__</meth> method with the same arguments as
their constructors. Those methods will append content nodes (and set attributes
for <class>ll.xist.xsc.Element</class>) and return <self/>, so they can be used
when creating an object tree. This makes it possible to put the attributes close
to the tag name, instead of putting them at the end after the content.</p>
<p>Instead of:</p>
<example>
<prog>
node = html.table(
	html.tr(
		html.td("foo"),
		html.td("bar"),
	),
	html.tr(
		html.td("spam"),
		html.td("eggs")
	),
	class_="example"
)
</prog>
</example>
<p>you can now use the following:</p>
<example>
<prog>
node = html.table(class_="example")(
	html.tr(
		html.td("foo"),
		html.td("bar"),
	),
	html.tr(
		html.td("spam"),
		html.td("eggs")
	)
)
</prog>
</example>

</li>

<li><p>Experimental support for Holger Krekel's
<a href="http://codespeak.net/svn/user/hpk/talks/xpython-talk.txt">XPython</a>
has been added. Code might look like this:</p>
<example>
<prog>
from ll.xist import xsc, converters
from ll.xist.ns import html, meta

import random

c = converters.Converter()
&lt;c&gt;:
	&lt;html.html()&gt;:
		&lt;html.head()&gt;:
			&lt;meta.contenttype()&gt;: pass
			&lt;html.title()&gt;:
				xsc.append("The title")
		&lt;html.body(class_="foo")&gt;:
			&lt;html.h1()&gt;:
				flag = random.choice((0, 1))
				if flag:
					xsc.append("The foo page", class_="foo")
				else:
					xsc.append("The bar page", class_="bar")
			&lt;html.p()&gt;:
				if flag:
					xsc.append("The foo content")
				else:
					xsc.append("The bar content")

print c.lastnode.asBytes()
</prog>
</example>
</li>

<li>
<p>Creating global attributes has been simplified. Passing an instance
of <class>ll.xist.xsc.Namespace.Attrs</class> to an <class>Element</class>
constructor now does the right thing:</p>
<example>
<prog>
from ll.xist.ns import html, xml
node = html.html(
	html.head(),
	xml.Attrs(lang="de"),
	lang="en",
)
</prog>
</example>
</li>

<li>Creating skeleton implementations of &xist; namespaces is no longer done
via &xml; conversion (i.e. the namespace module <mod>ll.xist.ns.xndl</mod>),
but through the new module <mod>ll.xist.xnd</mod>. The script
<filename>dtdxsc.py</filename> will automatically generate <mod>sims</mod>
information.</li>

<li><class>ll.xist.xsc.CharRef</class> now inherits from
<class>ll.xist.xsc.Text</class> too, so you don't have to special case
<class>CharRef</class>s any more. When publishing, <class>CharRef</class>s
will be handled like <class>Text</class> nodes.</li>

<li><class>ll.xist.ns.meta.contenttype</class> now has an attribute
<lit>mimetype</lit> (defaulting to <lit>"text/html"</lit>) for specifying
the &mime; type.</li>

<li><class>ll.xist.ns.htmlspecials.caps</class> has been removed.</li>

<li>Registering elements in namespace classes has been rewritten to use
a cache now.</li>

<li>Pretty printing has been changed: Whitespace will only be added now if
there are no text nodes in element content.</li>

<li>Two mailing lists are now available: One for discussion about &xist;
and one for &xist; announcements.</li>
</ul>
</section>


<section><h>Changes in 2.4.1 (released 01/05/2004)</h>
<ul>
<li>Changed the xmlname of <class>ll.xist.ns.jsp.directive_page</class> back again
(it's <lit>directive.page</lit> only for the &xml; form, which we don't use anyway.)</li>

<li>Drop the default value for <class>ll.xist.ns.jsp.directive_page.Attrs.language</class>,
as this attribute can only be used once.</li>

<li>If an <class>ll.xist.xsc.Prefixes</class> object has a prefix mapping for
a namespace it will return this prefix too, if asked for a prefix for a subclass
of this namespace.</li>
</ul>
</section>


<section><h>Changes in 2.4 (released 01/02/2004)</h>
<ul>
<li>The class <class>ll.xist.parsers.Handler</class> has been renamed to
<class>Parser</class> and has been made reusable, i.e. it is possible to
instantiate a parser once and use it multiple times for parsing. All the
classes derived from <class>xml.sax.xmlreader.InputSource</class> have been
dropped and the methods for parsing strings, &url;s and files have been
implemented as methods of the parser. Most of the arguments that had to be passed
to the various parsing functions are passed to the parser constructor now.
The basic parsing functionality is implemented by parsing streams instead of
<class>InputSource</class>s.</li>
<li>Similar to the changes for parsing, publishers have been changed to be
reusable and most arguments to the publishing functions are available as
arguments to the publisher constructor.</li>
<li>Now converter contexts are no longer bound to an element
class, but to the context class defined by the element class, i.e.
the attribute <lit>Context</lit> of the argument for <meth>Converter.__getitem__</meth>
will be used as the dictionary key. This makes it possible to use a class
and it subclasses interchangeably (as long as the base class defines
its own <class>Context</class> class and the subclasses don't overwrite it).</li>
<li>Added a find functor <class>FindTypeAllAttrs</class> that
searches content and attributes.</li>
<li>Fixed the &xml; name for <class>ll.xist.ns.jsp.directive_page</class>.</li>
<li>All character references in <mod>ll.xist.ns.ihtml</mod>
that exist in <mod>ll.xist.ns.chars</mod> too have been removed.</li>
</ul>
</section>


<section><h>Changes in 2.3 (released 12/08/2003)</h>
<ul>
<li>It's now possible to parse &xml; without generating location
information for each node, by passing <lit>loc=False</lit> to
the constructor of the <class>Handler</class>.</li>
<li>The <class>HTMLParser</class> no longer complains about
global attributes or <lit>xmlns</lit>.</li>
<li>&xist; now supports <app moreinfo="http://utidylib.sf.net/">&micro;Tidylib</app>
in addition to <app>mxTidy</app>. If <app>&micro;Tidylib</app> is found
it is preferred over <app>mxTidy</app>.</li>
<li>It's possible now to pass arguments to tidy simple by
passing an argument dictionary for the <arg>tidy</arg> argument
in the parsing functions.</li>
<li>The methods <meth>parsed</meth> and <meth>checkvalid</meth>
have been separated.</li>
<li><class>ll.xist.ns.htmlspecials.pixel</class> and
<class>ll.xist.ns.htmlspecials.autopixel</class> now check whether their
<lit>color</lit> attribute is ok.</li>
<li>The base &url; is now set correctly when parsing from an &url;
even if the original &url; does a redirect. (This requires <mod>ll.url</mod>
version 0.11.3).</li>
<li>Namespace handling has been rewritten again, to be more standards
compliant: Now there is no prefixes for entities and processing instructions any longer.
Prefix mappings can be created much simpler, and they no longer contain any
namespace stack for parsing, as this is now done by the parser itself.
<class>xsc.NamespaceAttrMixIn</class> is gone too.</li>
<li>The processing instructions <class>exec_</class> and <class>eval_</class>
from <mod>ll.xist.ns.code</mod> have been renamed to <class>pyexec</class>
and <class>pyeval</class> and <class>import_</class> has been removed.</li>
<li><class>CharRef</class>s from <mod>ll.xist.ns.html</mod> have been
moved to a new module named <mod>ll.xist.ns.chars</mod>.</li>
<li>The method names <meth>beginPublication</meth>, <meth>endPublication</meth>
and <meth>doPublication</meth> have been lowercased.</li>
</ul>
</section>


<section><h>Changes in 2.2 (released 07/31/2003)</h>
<ul>
<li><p>Namespace handling has been completely rewritten.
Namespaces are now classes derived from <class>ll.xist.xsc.Namespace</class>.
Defining element classes can be done inside or outside the namespace
class. If the element classes are defined outside the namespace
class, they can be moved inside the namespace with a simple
attribute assignment:</p>
<prog>
class foo(xsc.Element):
	empty = False

class xmlns(xsc.Namespace):
	xmlname = "foo"
	xmlurl = "http://www.foo.com/ns/foo"

xmlns.foo = foo
</prog>
<p>The methods <meth>elementkeys</meth>, <meth>iterelementkeys</meth>,
<meth>elementvalues</meth>, <meth>iterelementvalues</meth>,
<meth>elementitems</meth> and <meth>iterelementitems</meth>
can be used for iterating through the element classes and their
names. You can use the method <meth>element</meth>
to get an element class with a certain name:</p>
<prog>
&gt;&gt;&gt; from ll.xist.ns import html
&gt;&gt;&gt; html.element("div")
&lt;element class ll.xist.ns.html/div at 0x824363c&gt;
</prog>
<p>For processing instructions, entities and character references
similar methods are available.</p>
<p>The method <meth>update</meth> can be used to add
many element classes to a namespace at once, simply by passing
a dictionary with those classes (use <lit>vars()</lit>
to add everything that's defined inside your module). The method
<meth>updatenew</meth> does the same, but copies only those
attributes that don't exist in the namespace, <meth>updateexisting</meth>
copies only those that do exist. You can turn a namespace
into a module with <meth>makemod</meth>:</p>
<prog>
from ll.xist import xsc

class foo(xsc.Element):
	empty = False

class xmlns(xsc.Namespace):
	xmlname = "foo"
	xmlurl = "http://www.foo.com/ns/foo"
xmlns.makemod(vars())
</prog>
<p>Put the above code into <filename>foo.py</filename> and
you can do the following:</p>
<prog>
>>> import foo
>>> foo
&lt;namespace foo/xmlns name=u'foo' url=u'http://www.foo.com/ns/foo' with 1 elements from 'foo.py' at 0x81bfc14&gt;
</prog>
</li>

<li><func>getns</func> has been dropped, so you always
have to pass in a <class>Namespace</class> class where a namespace
is required.</li>

<li>For the <class>ll.xist.ns.jsp.directive_page</class> element
automatic generation of the correct <lit>charset</lit> option
in the <lit>contentType</lit> attribute is only done when there
is a <lit>contentType</lit> attribute, as <lit>contentType</lit>
is optional.</li>

<li>The converter has a new property <func>node</func>.
<arg>node</arg> can't be passed to <meth>conv</meth> but
will be set to <self/> by <meth>conv</meth> automatically.
This makes it possible to access the <z>document root</z>
during conversion.</li>

<li><class>ll.xist.ns.htmlspecials.autoimg</class> no longer touches
existing width and height attributes. This means that %-formatting
of the existing attributes is no longer done.</li>

<li>Added a new class <class>ll.xist.ns.htmlspecials.autopixel</class>
that works like <class>ll.xist.ns.htmlspecials.pixel</class> but
inherits the size for the image specified via the <lit>src</lit>
attribute.</li>

<li><class>Frag</class> and <class>Element</class> now support
extended slices.</li>

<li><class>Frag</class> and <class>Element</class> now support
the methods <meth>extend</meth> and <meth>__iadd__</meth>.</li>

<li>For walking the tree the method <meth>walk</meth> has been completely
rewritten and a new method <meth>visit</meth> has been added. For
more info see the docstrings.</li>

<li><class>Node</class> now has two new methods <meth>copy</meth>
and <meth>deepcopy</meth> and supports the <mod>copy</mod>
module from the Python standard library.</li>

<li>Calling <meth>mapped</meth> through <meth>conv</meth> has
been removed. You again have to call <meth>mapped</meth> directly
and pass a node and a converter.</li>

<li>The &html; handling of the <class>HTMLParser</class> has been improved
(it now uses code from <mod>xml.sax.drivers2.drv_sgmlop_html</mod> (which
is part of <a href="http://pyxml.sf.net">PyXML</a>)).</li>

<li>The core functionality found in the script <filename>dtd2xsc.py</filename>
has been moved to a class method <meth>ll.xist.ns.xndl.fromdtd</meth> in the
<mod>ll.xist.ns.xndl</mod> namespace.</li>

<li><class>ll.xist.parsers.ExpatParser</class> is now a real subclass
instead of an alias for <class>xml.sax.expatreader.ExpatParser</class>
It reports unknown entity references to the application (if loading
of external entities is switched off, which is done by
<class>ll.xist.parsers.Handler</class> and only outside of attributes).</li>

<li>Namespaces have been added for Zope's TAL and METAL specifications.</li>

<li>A namespace has been added for <a href="http://www.w3.org/Style/XSL/">XSL-FO</a>.</li>
</ul>
</section>


<section><h>Changes in 2.1.4 (released 06/13/2003)</h>
<ul>
<li>Remove the checks for attributes in attributes and
moved the publication code for the full element into a separate
method. This allows &jsp; tag library namespaces to simply
overwrite <meth>publish</meth> to publish the element
even inside attributes. (This is the same fix as in release 1.5.10)</li>
</ul>
</section>


<section><h>Changes in 2.1.3 (released 05/07/2003)</h>
<ul>
<li>The methods <meth>sorted</meth>, <meth>reversed</meth>
and <meth>shuffled</meth> have been rewritten so they no longer
use <lit>sys.maxint</lit>. This change fixes those methods for
64 bit platforms (reported by Giles Frances Hall)</li>
</ul>
</section>


<section><h>Changes in 2.1.2 (released 02/27/2003)</h>
<ul>
<li><class>ll.xist.ns.struts_config11.plug_in</class> now
allows content (as the &dtd; states). (This is the same fix
as in release 1.5.8.)</li>
</ul>
</section>


<section><h>Changes in 2.1.1 (released 02/11/2003)</h>
<ul>
<li>Added a few elements and attributes to <mod>ll.xist.ns.doc</mod>:
<class>username</class>, which is used for the name of a user account,
<class>xref</class>, which is used for internal cross references and
the attribute <lit>id</lit> for <class>section</class>, which specifies
the target for an <class>xref</class>.</li>
</ul>
</section>


<section><h>Changes in 2.1 (released 12/09/2002)</h>
<ul>
<li>Added a new namespace module <mod>ll.xist.ns.xndl</mod>
that contains the <z>&xist; namespace definition language</z>, i.e.
elements that describe an &xist; namespace and can be used by
various scripts to generate skeleton namespace modules.
The first of these script is the &dtd; to namespace converter
<filename>dtd2xsc.py</filename>.</li>
<li>Added a new namespace module <mod>ll.xist.ns.tld</mod>
that contains the definition for Java Server Pages Tag Library
descriptors and a script <filename>tld2xsc.py</filename>
that uses this namespace to generate namespace modules from
<lit>tld</lit> files.</li>
<li><class>Attr</class> now supports the method
<meth>filtered</meth>. This is used by <meth>without</meth>
now. The arguments for <meth>without</meth> have changed,
because handling global attributes was too <z>magic</z>.
A new method <meth>with</meth> has been added, with does
the opposite of <meth>without</meth>, i.e. it removes all
attributes that are not specified as parameters.</li>
<li>The Python name of each <class>Node</class> subclass
is now available as the class attribute <lit>pyname</lit>.</li>
<li>To continue the great renaming <meth>withSep</meth>
has been renamed to <meth>withsep</meth>.</li>
<li>The namespace name for the <mod>ll.xist.ns.struts_html</mod>
module has been fixed.</li>
<li>The argument <arg>defaultEncoding</arg> for the various
parsing functions has been renamed to <arg>encoding</arg>.</li>
</ul>
</section>


<section><h>Changes in 2.0.8 (released 11/20/2002)</h>
<ul>
<li><func>ll.xist.ns.doc.getDoc</func> has been renamed
to <func>getdoc</func>.</li>
<li>The &css; parser was dropping the <lit>%</lit> from
percentage values. This has been fixed.</li>
</ul>
</section>


<section><h>Changes in 2.0.7 (released 11/12/2002)</h>
<ul>
<li><meth>xsc.Element.__nonzero__</meth> can no longer fall back
to <meth>xsc.Frag.__nonzero__</meth>.
(this is the same fix as in 1.5.7).</li>
</ul>
</section>


<section><h>Changes in 2.0.6 (released 11/11/2002)</h>
<ul>
<li>Performance optimizations.</li>
</ul>
</section>


<section><h>Changes in 2.0.5 (released 11/11/2002)</h>
<ul>
<li>Fixed a bug in <class>ll.xist.ns.specials.autoimg</class>:
Attributes were not converted before the size check was done
(this is the same fix as in 1.5.5).</li>
</ul>
</section>


<section><h>Changes in 2.0.4 (released 11/08/2002)</h>
<ul>
<li>Fixed a regression bug in <class>ll.xist.ns.jsp.directive</class>
and several documentation issues.</li>
</ul>
</section>


<section><h>Changes in 2.0.3 (released 10/30/2002)</h>
<ul>
<li>Fixed a few bugs in <class>HTMLParser</class>.</li>
<li>Added DocBook conversion for several elements
in <mod>ll.xist.ns.doc</mod>.</li>
<li>Now the <filename>__init__.py</filename> file for the
<mod>ll</mod> package is included.</li>
</ul>
</section>


<section><h>Changes in 2.0.2 (released 10/21/2002)</h>
<ul>
<li>Fixed a bug in <meth>Frag.__rmul__</meth> (by
reusing <meth>__mul__</meth>).</li>
<li>Fixed a bug with the backwards compatible prefix
mapping: Defining element classes in <lit>exec</lit> processing
instructions didn't work, because the prefixes object used for
parsing wouldn't be updated when the namespace object is
defined inside the processing instruction. Now using the default
for the <arg>prefixes</arg> argument in calls to the parsing
functions uses one global shared <class>Prefixes</class> instances
where all the namespaces that are newly defined will be registered too.</li>
</ul>
</section>


<section><h>Changes in 2.0.1 (released 10/17/2002)</h>
<ul>
<li>Fixed <filename>xscmake.py</filename> by removing the
prefix handling. <class>OldPrefixes</class> will always
be used for parsing now.</li>
</ul>
</section>


<section><h>Changes in 2.0 (released 10/16/2002)</h>
<ul>
<li>&xist; now requires at least Python 2.2.1.</li>
<li>Attribute handling has been largely rewritten. Instead of
a class attribute <lit>attrHandlers</lit>, the attributes
are now defined through a nested class named <class>Attrs</class>
inside the element. This class must be derived from <class>ll.xist.Element.Attrs</class>
(or one of its subclasses if you want to inherit attributes from
this class). Defining attributes is done through classes nested
inside this attributes class and derived from any of the known
attribute classes (like <class>TextAttr</class>, <class>URLAttr</class> etc.).
The class name will be the attribute name (and can be overwritten
with a class attribute <lit>xmlname</lit>. This makes it possible
to have docstrings for attributes. Furthermore it's possible
to define an attribute default value via the class attribute <lit>default</lit>,
allowed values for the attribute via <lit>values</lit>,
which is a list of allowed values, and whether the attribute is
required or not via <lit>required</lit>.</li>
<li>&xist; now has real namespace support. The new class
<class>ll.xist.xsc.Prefixes</class> can be used to define a
mapping between prefixes and namespace names. This can be
used for parsing and publishing. Namespace support is even
available for entities and processing instruction.</li>
<li>Global attributes are supported now. Namespace modules
for the <lit>xml</lit> and <lit>xlink</lit> namespaces
have been added (and <class>ll.xist.xsc.XML</class> was
moved to <mod>ll.xist.ns.xml</mod>).</li>
<li>A new namespace module for &svg; 1.0 has been added: <mod>ll.xist.ns.svg</mod>.</li>
<li>The &html; specific parts of <mod>ll.xist.ns.specials</mod>
have been split off into a separate module <mod>ll.xist.ns.htmlspecials</mod>.</li>
<li>Comparison of attributes with strings has been removed.
You have to use <meth>__unicode__</meth> or <meth>__str__</meth>
now before comparing.</li>
<li>The <class>HTMLParser</class> now removes unknown attributes
instead of complaining.</li>
<li>There is a new parser class <class>BadEntityParser</class>, which
is a &sax;2 parser that recognizes the character entities
defined in &html; and tries to pass on unknown or malformed
entities to the handler literally.</li>
<li>To give all nodes a chance to do something after they have been parsed
(e.g. to prepend the base &url; for <class>URLAttr</class> nodes), the parser
now calls the method <meth>parsed</meth> immediately after node creation.
This is used for the new class <class>StyleAttr</class>, which uses the
<class>CSSTokenizer</class>, to prepend the base &url; to all &url;s
found in a style attribute.</li>
<li>The pixel images have been moved to the directory <dirname>px</dirname>
to make image &url;s shorter.</li>
</ul>
</section>


<section><h>Changes in 1.6.1 (released 08/25/2003)</h>
<ul>
<li>Updated to work with newer versions of <mod>ll.ansistyle</mod>.</li>
<li>Updated the namespaces <mod>ll.xist.ns.struts_html</mod> and
<mod>ll.xist.ns.struts_config11</mod> to the state of Struts 1.1 final.</li>
</ul>
</section>


<section><h>Changes in 1.6 (released 07/02/2003)</h>
<ul>
<li>Removed the default value for the <lit>className</lit> attribute
in <class>ll.xist.ns.struts_config11.action</class>.</li>
<li>Added an attribute <lit>type</lit> to
<class>ll.xist.ns.struts_config11.action_mapping</class>.</li>
</ul>
</section>


<section><h>Changes in 1.5.13 (released 07/01/2003)</h>
<ul>
<li>Implemented <meth>ll.xist.xsc.Namespace.__eq__</meth>,
so that replacing a namespace in the registry really works.</li>
<li>Added an attribute <lit>target</lit> to <class>ll.xist.ns.html.area</class>.</li>
</ul>
</section>


<section><h>Changes in 1.5.12 (released 06/17/2003)</h>
<ul>
<li>Fixed a bug in the new <mod>ll.xist.ns.jsp</mod>.</li>
</ul>
</section>


<section><h>Changes in 1.5.11 (released 06/13/2003)</h>
<ul>
<li>Updated <mod>ll.xist.ns.jsp</mod> to &jsp; 1.2.</li>
</ul>
</section>


<section><h>Changes in 1.5.10 (released 06/13/2003)</h>
<ul>
<li>Remove the checks for attributes in attributes and
moved the publication code for the full element into a separate
method. This allows &jsp; tag library namespaces to simply
overwrite <meth>publish</meth> to publish the element
even inside attributes.</li>
</ul>
</section>


<section><h>Changes in 1.5.9 (released 04/30/2003)</h>
<ul>
<li>Reregistering a namespace now properly overwrites
the old version in <lit>xsc.namespaceRegistry</lit>.</li>
</ul>
</section>


<section><h>Changes in 1.5.8 (released 02/27/2003)</h>
<ul>
<li><class>ll.xist.ns.struts_config11.plug_in</class> now
allows content (as the &dtd; states).</li>
</ul>
</section>


<section><h>Changes in 1.5.7 (released 11/12/2002)</h>
<ul>
<li><meth>xsc.Element.__nonzero__</meth> can no longer fall back
to <meth>xsc.Frag.__nonzero__</meth>.</li>
</ul>
</section>


<section><h>Changes in 1.5.6 (released 11/11/2002)</h>
<ul>
<li>Performance optimizations.</li>
</ul>
</section>


<section><h>Changes in 1.5.5 (released 11/11/2002)</h>
<ul>
<li>Fixed a bug in <class>ll.xist.ns.specials.autoimg</class>:
Attributes were not converted before the size check was done.</li>
</ul>
</section>


<section><h>Changes in 1.5.4 (released 09/30/2002)</h>
<ul>
<li><filename>xscmake.py</filename> now tries to strip off
a trailing <lit>xsc</lit> from the filename before it falls back
to the extension <lit>html</lit> (The builtin extension mapping
is still tried first).</li>
</ul>
</section>


<section><h>Changes in 1.5.3 (released 09/25/2002)</h>
<ul>
<li>Added new processing instruction class <class>ll.xist.ns.php.expression</class>
that generates a &php; <lit>print</lit> statement from its content.</li>
</ul>
</section>


<section><h>Changes in 1.5.2 (released 09/19/2002)</h>
<ul>
<li>Removed the <lit>value</lit> magic from
<class>ll.xist.ns.form.checkbox</class> as this
conflicted with dynamic <lit>value</lit> values.</li>
</ul>
</section>


<section><h>Changes in 1.5.1 (released 09/17/2002)</h>
<ul>
<li>Comparison of attributes with strings has been removed.
You have to use <meth>__unicode__</meth> or <meth>__str__</meth>
instead.</li>
<li>The <class>HTMLParser</class> now removes unknown attributes
instead of complaining.</li>
<li>There is a new parser class <class>BadEntityParser</class>, which
is a &sax;2 parser that recognizes the character entities
defined in &html; and tries to pass on unknown or malformed
entities to the handler literally.</li>
<li>To give all nodes a chance to do something after they have been parsed
(e.g. to prepend the base URL for <class>URLAttr</class> nodes), the parser
now calls the method <meth>parsed()</meth> immediately after node creation.
This is used for the new class <class>StyleAttr</class>, which uses the
<class>CSSTokenizer</class>, to prepend the base url to all urls found in
a style attribute.</li>
<li>The <class>HTMLParser</class> now removes unknown attributes
instead of complaining.</li>
<li>There is a new parser class <class>BadEntityParser</class>, which
is a &sax;2 parser that recognizes the character entities
defined in &html; and tries to pass on unknown or malformed
entities to the handler literally.</li>
<li>To give all nodes a chance to do something after they have been parsed
(e.g. to prepend the base &url; for <class>URLAttr</class> nodes), the parser
now calls the method <meth>parsed</meth> immediately after node creation.
This is used for the new class <class>StyleAttr</class>, which uses the
<class>CSSTokenizer</class>, to prepend to base &url; to all &url;s
found in a style attribute.</li>
</ul>
</section>


<section><h>Changes in 1.4.3 (released 04/29/2002)</h>
<ul>
<li>New namespace module <mod>xist.ns.struts_config11</mod>
allows to parse and modify <a href="http://jakarta.apache.org/struts/">Struts</a>
configuration files conforming to the
<a href="http://jakarta.apache.org/struts/dtds/struts-config_1_1.dtd">Struts 1.1 DTD</a>.
</li>
</ul>
</section>


<section><h>Changes in 1.4.2 (released 03/22/2002)</h>
<ul>
<li>Updated <filename>xscmake.py</filename> to be compatible with the new
<mod>url</mod> module.</li>
<li><class>xist.ns.jsp.directive_page</class> now automatically sets the
<lit>contentType</lit> on publishing.</li>
</ul>
</section>


<section><h>Changes in 1.4.1 (released 03/21/2002)</h>
<ul>
<li>Removed <class>TidyURLInputSource</class>. Now it's possible
to pass a <lit>tidy</lit> flag to the remaining functions <func>parseString</func>,
<func>parseFile</func> and <func>parseURL</func> to specify whether
the source should be tidied.</li>
<li>To prevent an element from being registered in a <class>Namespace</class>
the class attribute <lit>register</lit> can be used now. This makes
it possible to have a name for the element even when it's not registered.</li>
<li><mod>xist.ns.form</mod> elements now have all the attributes that the
corresponding elements from <mod>xist.ns.html</mod> have.</li>
<li>Removed the old <mod>xist.url</mod> from the Windows distribution.</li>
</ul>
</section>


<section><h>Changes in 1.4 (released 03/18/2002)</h>
<ul>
<li>Reimplemented &url; handling again. Now the new global
module <mod>url</mod> is used for that.</li>
</ul>
</section>


<section><h>Changes in 1.3.1 (released 03/14/2002)</h>
<ul>
<li>Added a method <meth>pretty</meth> to <class>Node</class>
for generating a pretty printable version of the node.</li>
<li><lit>xsc.Node.name</lit> no longer is a class method, but a
class attribute, that will be set at class instantiation time
by the meta class.</li>
</ul>
</section>


<section><h>Changes in 1.3 (released 02/12/2002)</h>
<ul>
<li>Ported to Python 2.2. <class>Node</class> is now derived from
<class>object</class>, <class>Frag</class> from <class>list</class> and
there's a new class <class>Attrs</class> which is derived from
<class>dict</class> for the attribute mappings. All presenters
have been adapted to work with <class>Attrs</class>.
In addition to the usual dictionary methods and operators <class>Attrs</class>
has a method <meth>without</meth> that returns a copy of the
<class>Attrs</class> instance with some specified attributes removed.</li>
<li>All the node classes now have a new method <meth>walk</meth> that generates
all nodes in the tree using the new generator feature of Python 2.2.</li>
<li>Also a new method <meth>walkPath</meth> has been added that works the
same as <meth>walk</meth> but yields the complete path to each node
as a list.</li>
<li>Added a class <class>block</class> to <mod>xist.ns.jsp</mod>.
The content of the <class>block</class> instance will simply be enclosed
in a <lit>{}</lit> block. <mod>xist.ns.php</mod> got such
a class too.</li>
<li>Added a new module <mod>xist.ns.ihtml</mod> for
i-mode &html;.</li>
<li>Added new modules <mod>xist.ns.css</mod> and
<mod>xist.ns.cssspecials</mod> for generating &css;.</li>
<li>Now the various attributes of the <class>Converter</class> object
are collected in a <class>ConverterState</class> object and it's possible
to push and pop those states, i.e. it's now easy to temporarily modify a
converter object during a <meth>convert</meth> call and revert back
to a previous state afterwards.</li>
<li><func>parseURL</func> and <func>parseTidyURL</func>
now have an additional parameter <lit>headers</lit> which is a list of
string pairs specifying additional headers to be passed in with the
request.</li>
<li><func>parseString</func> has an additional parameter
<lit>systemId</lit> which will be the system id of the
<class>InputSource</class>.</li>
<li>The distribution now includes the makefile and the &xml;
source files so now the distribution can rebuild ifself.</li>
<li>Various other small bugfixes and enhancements.</li>
</ul>
</section>


<section><h>Changes in 1.2.5 (released 12/03/2001)</h>
<ul>
<li>Added a new element <class>contentscripttype</class> to
<mod>xist.ns.meta</mod> that generates a
<lit>&lt;meta http-equiv="Content-Script-Type" ...&gt;</lit>
element.</li>
<li><func>xist.ns.doc.explain</func> now generates anchor elements
for the class, function and method description, so now the
links on the &xist; webpages work.</li>
<li>Docstrings and documentation has been reworked. Now
<class>xist.ns.doc.pyref</class> no longer implies a font change.
Use the classes <class>xist.ns.doc.module</class>, <class>xist.ns.doc.class</class>,
<class>xist.ns.doc.method</class>, <class>xist.ns.doc.function</class> and
<class>xist.ns.doc.arg</class> to mark up your Python identifiers.</li>
<li>Added the attributes <lit>type</lit> and <lit>key</lit>
to <class>xist.ns.struts_config.data_source</class>.</li>
</ul>
</section>


<section><h>Changes in 1.2.4 (released 11/23/2001)</h>
<ul>
<li>Added the deprecated attributes <lit>start</lit> to
<class>xist.ns.html.ol</class> and <lit>value</lit> to
<class>xist.ns.html.li</class>.</li>
</ul>
</section>


<section><h>Changes in 1.2.3 (released 11/22/2001)</h>
<ul>
<li>Added missing <meth>asPlainString</meth> methods to
<class>Comment</class> and <class>DocType</class>.</li>
</ul>
</section>


<section><h>Changes in 1.2.2 (released 11/16/2001)</h>
<ul>
<li><meth>xist.url.URL.fileSize</meth> and <meth>xist.url.URL.imageSize</meth>
now use the warning framework to report errors.</li>
<li>There is a new presenter named <class>CodePresenter</class> that dumps the
tree as Python source code.</li>
<li>The filenames of the pixel images used by <class>xist.ns.specials.pixel</class>
have changed. These images are now included.</li>
</ul>
</section>


<section><h>Changes in 1.2.1 (released 10/08/2001)</h>
<ul>
<li>URLs that are completely dynamic will now be left in peace when parsing
or publishing.</li>
</ul>
</section>


<section><h>Changes in 1.2 (released 10/03/2001)</h>
<ul>
<li><p><class>xist.ns.meta.keywords</class>
and <class>xist.ns.meta.description</class>
no longer call <meth>asPlainString</meth>
on their content. This makes it possible to e.g. generate the keywords via &jsp;:</p>
<example>
<prog>
&gt;&gt;&gt; from xist import parsers
&gt;&gt;&gt; from xist.ns import meta, jsp
&gt;&gt;&gt; s = '&lt;keywords&gt;' + \
...     '&lt;?jsp:expression "foo"?&gt;' + \
...     '&lt;/keywords&gt;'
&gt;&gt;&gt; e = parsers.parseString(s)
&gt;&gt;&gt; print e.conv().asBytes()
&lt;meta name="keywords" content="&lt;%= "foo" %&gt;" /&gt;
</prog>
</example>
</li>
<li>When an element occurs inside an attribute during publishing, there
won't be an exception raised any more. Instead the content of the element
will be published. This fixes problems with abbreviation entities inside
attributes.</li>
<li><class>xist.parsers.TidyURLInputSource</class> now uses the new
experimental eGenix mx Extension package, which includes a Python
port of <app>tidy</app>.</li>
<li><meth>__repr__</meth> now uses the new class <class>presenters.PlainPresenter</class>
which gives a little more info than the default <meth>__repr__</meth>.</li>
<li>URL handling has been changed again. Upto now, <class>URLAttr</class> had
an additional instance attribute <lit>base</lit>, which was the <z>base</z> file/URL
from which the attribute was parsed. Now the base URL will be directly incorporated
into the URL. You can pass the base URL to all the parsing functions. Similar to
that when publishing you can specify a base URL. All URLs in the tree will be
output relative to this base URL. Joining URLs is now done via <meth>__div__</meth>
and no longer via <meth>__add__</meth>. This makes it more consistent with
<mod>fileutils</mod>. The plan is to make URLs string like immutable objects
and to merge them with <class>fileutils.Filename</class>.</li>
<li><class>xist.ns.specials.php</class> has been moved to its own
module (<mod>xist.ns.php</mod>). This module provided additional
convenience processing instructions (just like <mod>xist.ns.jsp</mod>
does).</li>
</ul>
</section>


<section><h>Changes in 1.1.3 (released 09/17/2001)</h>
<ul>
<li>The global namespace registry now keeps a sequential list of all registered
namespaces, which will be used by the parser when searching for names. This
gives a predictable search order even without using <class>Namespaces</class>
and its <meth>pushNamespace</meth> method: modules imported last will be searched
first.</li>
<li>Processing instructions are now allowed inside attributes when
publishing.</li>
<li><mod>xist.ns.docbooklite</mod> has been renamed to <mod>xist.ns.doc</mod>.
It can now generate &html; and Docbook output and has improved a lot. The &xist; web pages
now use this for automatic documentation generation. The doc example has been removed.</li>
<li><class>xist.url.URL</class> now has a new method <meth>info</meth> that returns the headers
for the file/URL.</li>
<li><class>xist.url.URL</class> now has a methods <meth>fileSize</meth> and <meth>imageSize</meth>
too.</li>
<li><class>xist.ns.jsp.directive_page</class> now has new attribute <lit>session</lit>.</li>
</ul>
</section>


<section><h>Changes in 1.1.2 (released 08/21/2001)</h>
<ul>
<li><meth>__repr__</meth> now uses the new class <class>presenters.PlainPresenter</class>
which gives a little more info than the default <meth>__repr__</meth>.</li>
</ul>
</section>


<section><h>Changes in 1.1.1 (released 08/01/2001)</h>
<ul>
<li>Small bugfix in <func>presenters.strProcInst</func></li>
<li>fixed <class>xist.ns.struts_html.option</class> to allow content</li>
</ul>
</section>


<section><h>Changes in 1.1 (released 07/19/2001)</h>
<ul>
<li>Sequences in constructor arguments for <class>Frag</class> and
<class>Element</class> are again expanded and it's again possible
to pass dictionaries in an <class>Element</class> constructor to
specify attributes. As sequences are always unpacked, the method
<meth>extend</meth> is gone. This works for <meth>append</meth>
and <meth>insert</meth> too.</li>

<li><p><class>Node</class> and <class>Frag</class> implement
<meth>__mul__</meth> and <meth>__rmul__</meth>, so you can do stuff like:</p>
<prog>
html.br()*5
</prog>
<p>This returns a <class>Frag</class> with five times to same node.</p></li>

<li><p>Arguments for the converter constructor can be passed to
<meth>xist.xsc.Node.conv</meth> now, so it's possible to do stuff like this:</p>
<prog>
from xist.ns import code
print code.Eval("return converter.lang") \
	.conv(lang="en").asBytes()
</prog>
<p>which will print <lit>en</lit>.</p></li>
<li>The option <arg>XHTML</arg> for the publishers has been changed
to lowercase.</li>
<li><class>xist.ns.html.html</class> will automatically generate a
<lit>lang</lit> and <lit>xml:lang</lit> attribute when the
converter has a language set.</li>
</ul>
</section>


<section><h>Changes in 1.0 (released 06/18/2001)</h>
<ul>
<li>New module for &wml; 1.3.</li>

<li>The publishing interface has changed internally
and publishing should be faster now.</li>

<li>Publishers now support a new parameter:
<arg>usePrefix</arg>, which specifies if namespace prefixes
should be output for the element names.</li>

<li>Part of the implementation of the publishing
stuff has been moved to C, so now you'll need
a C compiler to install &xist;.</li>

<li>When publishing <lit>"</lit>, it will now only be replaced with
<lit>&amp;quot;</lit> inside attributes.</li>

<li>All the <meth>asHTML</meth> methods now have an additional argument
<arg>converter</arg>. This makes it possible
to implement different processing modes or stages
for new elements. All currently implemented elements and
entities ignore this argument, but pass it on
in the call to their childrens' <meth>asHTML</meth> method.
As the name <meth>asHTML</meth> no longer makes sense, <meth>asHTML</meth>
has been renamed to <meth>convert</meth>.</li>

<li>There is now a tool <filename>dtd2xsc.py</filename> in the
<filename>scripts</filename> directory that creates
a skeleton &xist; module from a &dtd; (this requires <app>xmlproc</app>
from the <app>PyXML</app> package).</li>

<li>New preliminary module for DocBook 4.12.
(Incomplete: <meth>convert</meth> methods and Unicode character
entities are missing; any volunteers for implementing 375 classes?)</li>

<li>New module <filename>ruby.py</filename> that implements the
<a href="http://www.w3.org/TR/ruby/xhtml11-ruby-1.mod">W3C Ruby draft</a>.
</li>

<li><filename>sql.py</filename> has been removed from &xist;, but is available
as a <a href="root:sql/index.html">separate module</a>.</li>

<li>The parsing interface has been changed. Parsing is now done
with the functions <func>parseFile</func>, <func>parseString</func>,
<func>parseURL</func> and <func>parseTidyURL</func> in the module
<mod>parsers</mod>. It's now possible to specify which parser should
be used for parsing by passing a SAX2 parser instance to any of
these functions. &xist; now includes a rudimentary SAX2 driver
for <class>sgmlop</class> and a rudimentary &html; parser that
emits SAX2 events.</li>

<li>The python-quotes example has been updated to work with expat.</li>

<li>Added a new example: media.</li>

<li>All abbreviation entities have been moved to
a new module <filename>abbr.py</filename>.</li>

<li>All the modules that provide new elements and entitites
have been moved to a subpackage <mod>ns</mod>.</li>

<li><class>Frag</class> and <class>Element</class>
now have new methods <meth>sorted</meth>,
<meth>reversed</meth>, <meth>filtered</meth> and
<meth>shuffled</meth> that return sorted, reversed, filtered
and shuffled versions of the <class>Frag</class>/<class>Element</class>
object.</li>

<li>New namespace modules <filename>ns/jsp.py</filename> and
<filename>ns/struts_html.py</filename> have been added that allow you to
use <a href="http://java.sun.com/products/jsp/">&jsp;</a> and
<a href="http://jakarta.apache.org/struts/">Struts</a> tags with &xist;.</li>

<li>A new method <meth>asText</meth> was added, that returns
the node as a formatted plain &ascii; text (this requires that
<app moreinfo="http://w3m.sf.net/">w3m</app>
is installed.)</li>

<li><filename>make.py</filename> has been renamed to
<filename>xscmake.py</filename> and moved to the
<dirname>scripts</dirname> directory,
it will be installed as a callable script with <lit>python setup.py install_scripts</lit>.</li>

<li><filename>xscmake.py</filename> has a new option <option>--files</option>/<option>-f</option>.
The argument is a file containing a list of filenames (one
name per line) that should be converted.</li>

<li><filename>xscmake.py</filename> has a new option <option>-r</option>/<option>--parser</option>
for specifying which parser to use. Allowed values are <lit>sgmlop</lit>
and <lit>expat</lit>.</li>

<li><p><filename>xscmake.py</filename> has a new option <option>-n</option>/<option>--namespace</option>
that can be used for appending <class>Namespace</class>
objects to the <class>Namespaces</class> object used by <filename>xscmake.py</filename>.</p>
<example>
<h>Using the --namespace option</h>
<prog>
xscmake.py -n html -n spam eggs.xsc
</prog>
</example>
<p>With this call the parser will find element classes from the
module with the prefix name <lit>spam</lit> before those
from <lit>html</lit> and those before anything else.</p></li>

<li><class>xist.url.URL</class> no longer has an attribute
<lit>ext</lit>. <lit>file</lit> and <lit>ext</lit> are
merged.</li>

<li>The special treatment of sequences as constructor arguments
to <class>Frag</class> and <class>Element</class>
has been removed, so &xist; will no longer remove one level of
nesting. If you still want that, use a <lit>*</lit> argument.</li>

<li><class>Frag</class> and <class>Element</class>
now have a new method <meth>mapped</meth>,
that recursively maps the nodes through a function. This is like
<meth>convert</meth> but via an external function.</li>

<li><p>Attribute handling has been improved thanks to a suggestion
by Hartmut Goebel: <meth>Element.__getitem__</meth> now
always works as long as the attribute name is legal. If the attribute
is not set, an empty attribute will be returned. All empty attributes
will be considered as being not set and so <meth>hasAttr</meth>
returns <lit>0</lit> for them, and <meth>publish</meth> doesn't
publish them. This simplifies several very common cases:</p>
<ul>
<li>Copying an attribute from one element to another works regardless
of whether the attribute is set or not;</li>
<li>Testing for an attributes presence can now be done much
simpler: <lit>if element["attrname"]</lit> instead of
<lit>if element.hasAttr("attrname")</lit> (which still
works, and should be a little faster);</li>
<li><p>When you construct a &dom; tree and the presence or absence
of an attribute is tied to a condition, you can construct the attribute
in advance and use it afterwards in the tree construction:</p>
<prog>
if <rep>condition</rep>:
	align = "right"
else:
	align = None
node = html.div("spam", align=align)
</prog>
<p>So, when the <lit><rep>condition</rep></lit> is false,
the node will not have the attribute <lit>align</lit> set.</p></li>
</ul>
</li>
<li><p><class>xist.ns.cond.If</class> (and <class>xist.ns.cond.ElIf</class>)
can now be used to test for attributes of the converter. I.e. it's possible to
write the following &xml;:</p>
<prog>
&lt;if lang="en"&gt;Title
&lt;elif lang="de"&gt;Überschrift
&lt;/if&gt;
</prog>
</li>
<li>URL handling has be completely changed and is much, much simpler now.
There are no more path markers. To specify an URL that is relative to the
current directory use the scheme <lit>root</lit> (e.g. <lit>root:main.css</lit>).</li>
</ul>
</section>


<section><h>Changes in 0.4.7 (released 11/24/2000)</h>
<ul>
<li>Fixed a bug in the entity handling.</li>

<li>Added a few deprecated elements and attributes to
the <mod>html</mod> module.</li>

<li>Improved the publishing of attributes. Now all attribute
values will be published. For boolean attributes no value
will be published for <lit>XHTML==0</lit> and the attribute
name will be used for <lit>XHTML==1</lit> or <lit>XHTML==2</lit>.</li>

<li><meth>Element.compact</meth> now works (better) ;).</li>

<li>Incorparated many bug fixes from Hartmut Goebel.</li>

<li>Implemented <meth>xsc.Element.copyDefaultAttrs</meth>, which copies
unset attributes over from a dictionary (simplifies
implementing <class>specials.plaintable</class> and <class>specials.plainbody</class>)</li>

<li><meth>providers.Provider.pushNamespace</meth> now handles multiple
arguments which may be <class>Namespace</class> objects or modules
(in which case, <lit><rep>module</rep>.namespace</lit> will be pushed)</li>

<li><meth>providers.Providers.popNamespace</meth> can now pop multiple
namespaces at once.</li>

<li><class>providers.TidyURIProvider</class> now uses <func>os.popen3</func> for
piping the file through tidy, so now there will be
no more temporary files. The call to tidy now includes
options that hopefully make the output more suited to
&xist;.</li>

<li>Incorparated a new <filename>url.py</filename> by Hartmut Goebel, that fixes
many problem (e.g. optimizing <lit>http://server/foo/bar/../../baz.gif</lit>
now works.)</li>

<li><filename>make.py</filename> includes a new option <option>--path</option> for
adding directories to <lit>sys.path</lit>.</li>
</ul>
</section>


<section><h>Changes in 0.4.6 (released 11/03/2000)</h>
<ul>
<li>Now uses <class>sgmlop.XMLParser</class> instead of
<class>sgmlop.SGMLParser</class>, so case is preserved.</li>

<li>Fixed another regression from the URL to string conversion
change.</li>
</ul>
</section>


<section><h>Changes in 0.4.5 (released 11/01/2000)</h>
<ul>
<li>Converting URLs to nodes is now done in <func>ToNode</func>,
so <class>URL</class> objects can be used everywhere.</li>

<li>Fixed a few bugs in <meth>Text._strtext</meth> and
<meth>URLAttr._str</meth>.</li>
</ul>
</section>


<section><h>Changes in 0.4.4 (releases 10/27/2000)</h>
<ul>
<li>Now testing if characters can be encoded with the
specified encoding is done directy. This means, that
escaping unencodable characters now works even with
exotic encodings (tested with
<a href="http://pseudo.grad.sccs.chukyo-u.ac.jp/~kajiyama/python/"><filename>JapaneseCodecs-1.0.1.tar.gz</filename></a>).</li>

<li>The <class>URLAttr</class> constructor now can handle a single parameter
of the type <class>URL</class>.</li>

<li>The URL to string conversion function have changed:
<meth>URL.asString</meth> returns the URL with path markers,
<meth>URL.asPlainString</meth> returns the URL without path markers.</li>

<li>Added the <lit>i18n</lit> attribute to the <class>font</class> element.</li>

<li>Fixed the clashes between the class names for the elements
and entities <class>sub</class> and <class>sup</class> in <filename>html.py</filename>.</li>

<li>Several small enhancements and bug fixes contributed by
Hartmut Goebel.</li>
</ul>
</section>


<section><h>Changes in 0.4.3 (released 10/19/2000)</h>
<ul>
<li>Now processing instruction classes are registered in the
same way as elements and entities are.</li>

<li>The leaf nodes (<class>Text</class>, <class>Comment</class>,
<class>ProcInst</class>) are now considered immutable.
This means that their <meth>asHTML</meth> method can
simply return <self/>, because now those nodes can be shared between
trees. Functionality for manipulation the objects is provided by a mixin
class very similar to <class>UserString</class>. All this results
in a speedup of about 10% for the python-quotes example.</li>

<li>Small optimizations in the <meth>asHTML</meth> methods of <class>Element</class> and
<class>Frag</class> optimized away many calls to <meth>append</meth>,
<meth>extend</meth> and <meth>ToNode</meth> and result in a speedup
of about 30% for the python-quotes example. One consequence of this is
that <class>Null</class> objects will no longer be ignored.</li>
</ul>
</section>


<section><h>Changes in 0.4.2 (released 09/24/2000)</h>
<ul>
<li>New elements <class>keywords</class> and <class>description</class> in
<filename>meta.py</filename>.</li>

<li>Fixed a bug in <meth>Namespace.register</meth>, now setting <lit>name=None</lit>
to prevent an element from being registered works again.</li>
</ul>
</section>


<section><h>Changes in 0.4.1 (released 09/21/2000)</h>
<ul>
<li>A new module named <filename>meta.py</filename> has been created, that simplifies
generating meta tags.</li>

<li>Various small bugfixes.</li>
</ul>
</section>


<section><h>Changes in 0.4 (released 09/19/2000)</h>
<ul>
<li>&xist; now requires at least Python 2.0b1.</li>

<li>A new bugfixed version of the <app>sgmlop</app> source is available
from the <a href="ftp://ftp.livinglogic.de/pub/livinglogic/xist/">&ftp; site</a>.</li>

<li>&xist; now completely supports Unicode. For output any
encoding known to Python can be used, so now you
can output your &html; in ASCII, Latin-1, UTF-8, UTF-16, ...</li>

<li>All publishers have been updated to support Unicode.
The publishing interface has been streamlined (<arg>encoding</arg>
and <arg>XHTML</arg> parameters are now attributes of the publisher).</li>

<li><meth>asString</meth> will now always return a Unicode string. If you
want a byte string use <meth>asBytes</meth> instead, where the encoding
can be specified as an argument.</li>

<li>There an additional publisher class <class>FilePublisher</class>, which can
be used for publishing to a file (or anything else that has
a <meth>write</meth> and a <meth>writelines</meth> method, and is supported by the stream
writer available through <func>codecs.lookup</func>).</li>

<li>Element and attribute names are no longer converted to lowercase.
If you have an attribute name which clashes with a Python
keyword (e.g. <lit>class</lit>) append an underscore (<lit>_</lit>),
which will be removed before accessing the attribute. This is the <z>official</z>
Python method for handling these cases.</li>

<li>Elements and entities are no longer registered one by one. Now
you can build <class>Namespace</class> objects which are used for searching
and there are <meth>pushNamespace</meth> and <meth>popNamespace</meth>
functions in <mod>XSC.xsc</mod>. For more info, see the source.</li>

<li>Image size calculation has been removed from <class>html.img</class> and
<class>html.input</class>. Use <class>specials.autoimg</class> and
<class>specials.autoinput</class> for that.</li>

<li><meth>__getitem__</meth>, <meth>__setitem__</meth> and <meth>__delitem</meth>
of <class>Frag</class> and <class>Element</class> now accepts a list as an argument.
The method will be applied recursively, i.e. <lit>e[[0, 1, "foo", 2]</lit> is the
same as <lit>e[0][1]["foo"][2]</lit>.</li>

<li>The deprecated module <filename>db.py</filename> no longer exists. Useful functions and elements
from <filename>db.py</filename> have been moved to <filename>sql.py</filename> and
<filename>form.py</filename> respectively.</li>

<li>When using <func>xsc.make</func> the encoding and XHTML parameters to use can now
be specified on the command line (e.g. <lit>--encoding utf-8 --xhtml 2</lit>)</li>

<li><p>Handling of multiline <markup>&lt;?xsc-eval?&gt;</markup> and <markup>&lt;?xsc-exec?&gt;</markup>
has been enhanced, although, &xist; will not be able to guess the correct indentation
in all cases. As a workarround simply add a Python comment to the beginning:</p>
<prog>
&lt;?xsc-exec
	for i in xrange(10):
		do(i)
?&gt;
</prog>
<p>won't work</p>
<prog>
&lt;?xsc-exec
	#
	for i in xrange(10):
		do(i)
?&gt;
</prog>
<p>will.</p>
</li>

<li><p>Make functionality has been moved to <filename>make.py</filename>, as certain modules can't
be used as the main script, because reimporting them in processing
instructions won't work. Now you can simply call</p>
<example>
<h>The new make script</h>
<prog>make.py --import xist.html --import spam eggs.xsc</prog>
</example>
</li>

<li><p>There is a new module <filename>cond.py</filename>, that contains
elements that can be used for conditionals:</p>
<prog>
&lt;?xsc-exec a=42?&gt;
&lt;if cond="a==21"&gt;
	&lt;b&gt;foo&lt;/b&gt;
&lt;elif cond="a==42"/&gt;
	&lt;i&gt;bar&lt;/i&gt;
&lt;else/&gt;
	baz
&lt;/if&gt;
</prog>
</li>
</ul>
</section>


<section><h>Changes in 0.3.9 (released 08/10/2000)</h>
<ul>
<li><app>sgmlop</app> will now be found either via <lit>import sgmlop</lit>
or via <lit>from xml.parsers import sgmlop</lit>.</li>
</ul>
</section>


<section><h>Changes in 0.3.8 (released 07/14/2000)</h>
<ul>
<li>Fixed a bug in <meth>URLAttr.publish</meth>, which prevented
<class>URLAttr</class> from working at all.</li>
</ul>
</section>


<section><h>Changes in 0.3.7 (released 07/06/2000)</h>
<ul>
<li>Fixed a bug in <class>html.img</class> and <class>html.input</class>.
Now image size calculation works again.</li>
</ul>
</section>


<section><h>Changes in 0.3.6 (released 07/04/2000)</h>
<ul>
<li>Fixed a bug in <meth>Node._matches</meth>, which resulted in a non working
<meth>find</meth>.</li>
</ul>
</section>


<section><h>Changes in 0.3.5 (released 07/02/2000)</h>
<ul>
<li>The documentation example has been enhanced. Now documenting methods works.</li>

<li>When the member <lit>elementname</lit> in the element class is set before calling
<func>registerElement</func>, this element name will be used for the element. This
allows custom names even when using <func>registerAllElements</func>.</li>

<li>Comparison of scheme and server in URLs is done case insensitive
(as <a href="http://www.ietf.org/rfc/rfc2068.txt">RFC 2068</a>
requires.)</li>

<li><p>Image size calculation is now done in <meth>asString</meth> and
not in <meth>asHTML</meth>.
This allows to write faster code. Old method:</p>
<prog>e = html.div(html.img(...),gurk.hurz()).asHTML().asString()</prog>
<p>New method</p>
<prog>e = html.div(html.img(...),gurk.hurz().asHTML()).asString()</prog></li>

<li>Image size calculation is now done for <markup>&lt;input type="image"&gt;</markup>.
The <lit>size</lit> attribute is set to the image width.</li>

<li><p>Manipulating the path in an &url; is now done via the usual
<meth>__setitem__</meth>/<meth>__getitem__</meth> stuff,
which keeps the path in a consistent state.</p>
<prog>
&gt;&gt;&gt; from xist.URL import URL
&gt;&gt;&gt; u = URL("/foo/*/../bar/baz.gif")
&gt;&gt;&gt; del u[1]
&gt;&gt;&gt; u
URL(scheme='server', path=['bar'], file='baz', ext='gif')
</prog>
</li>

<li><meth>findNodes</meth> (which has been shortened to <meth>find</meth>)
has an additional argument <arg>test</arg>, which can be a test function that will
be called when the node passes all other tests.</li>

<li><meth>asString</meth> no longer generates a string directly, but uses the new method
<meth>publish</meth>, which has an additional argument <arg>publisher</arg>,
to which the strings to be output are passed.</li>
</ul>
</section>


<section><h>Changes in 0.3.4 (released 05/31/2000)</h>
<ul>
<li>Location information is now copied over in <meth>clone</meth>, <meth>asHTML</meth>
and <meth>compact</meth> where appropriate, so you know even in the &html; tree
where something came from.</li>

<li><p><lit>xsc.repransi</lit> can now have three values:</p>
<ul>
<li><lit>0</lit>: coloring is off</li>
<li><lit>1</lit>: coloring is on for a dark background</li>
<li><lit>2</lit>: coloring is on for a light background</li>
</ul>
<p>All <lit>repransi</lit> variables are now arrays with two strings,
the first for dark, the second for light.</p></li>
</ul>
</section>


<section><h>Changes in 0.3.3 (released 05/30/2000)</h>
<ul>
<li>The workaround for the trailing CDATA bug in <app>sgmlop</app> has been removed, so now
you'll need a newer version of <app>sgmlop</app> (included in <app>PyXML 0.5.5.1</app>)</li>
</ul>
</section>


<section><h>Changes before 0.3.3</h>
<ul>
<li>These changes predate written history.</li>
</ul>
</section>
