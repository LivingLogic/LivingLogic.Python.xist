# Connect to the Postgres database

connect("postgres:" + connectstring_postgres)

# In Postgres we can put all of our testing stuff into one schema,
# which makes cleanup very easy, we just have to
drop schema if exists pysqltest cascade;

-- @@@

create schema pysqltest;

-- @@@

# We can't really use ``raise_exceptions()`` like we can in Oracle, because
# after an exception from the Postgres database the transaction is broken.
# But we can do a test where we close the connection immediately after
# the exception.

push_raise_exceptions(False)

connect("postgres:" + connectstring_postgres)

do_something_that_wont_work;

-- @@@

disconnect()

pop_raise_exceptions()

# Create our test table which we will fill with test data.

create table pysqltest.test_table(
	tt_id integer,
	tt_identifier varchar(200),
	tt_int integer,
	tt_number decimal,
	tt_str text,
	tt_date date,
	tt_datetime timestamp,
	tt_cdate timestamp with time zone
);

-- @@@

alter table pysqltest.test_table add constraint test_table_pk primary key(tt_id);

-- @@@

create sequence pysqltest.test_sequence
	minvalue 10
	start with 10
	increment by 10
	cache 20
;

-- @@@

create or replace procedure pysqltest.test_procedure(
	p_tt_id in out integer,
	p_tt_identifier text default null,
	p_tt_int integer default null,
	p_tt_number numeric default null,
	p_tt_str text default null,
	p_tt_date date default null,
	p_tt_datetime timestamp default null
)
language plpgsql
as
$$
begin
	if p_tt_id is null then
		p_tt_id := 1;
	end if;

	insert into pysqltest.test_table
	(
		tt_id,
		tt_identifier,
		tt_int,
		tt_number,
		tt_str,
		tt_date,
		tt_datetime,
		tt_cdate
	)
	values
	(
		p_tt_id,
		p_tt_identifier,
		p_tt_int,
		p_tt_number,
		p_tt_str,
		p_tt_date,
		p_tt_datetime,
		clock_timestamp()
	);

	p_tt_id := p_tt_id + 100;
end;
$$
;

-- @@@

procedure(
	"pysqltest.test_procedure",
	args=dict(
		p_tt_id=var("tt_id_1"),
		p_tt_identifier="full",
		p_tt_int=42,
		p_tt_number=42.5,
		p_tt_str="Ã¤"*100000,
		p_tt_date=datetime.date(2000, 2, 29),
		p_tt_datetime=datetime.datetime(2000, 2, 29, 12, 34, 56),
	),
	argtypes=dict(
		p_tt_identifier="text",
		p_tt_int="integer",
		p_tt_number="numeric",
		p_tt_str="text",
		p_tt_date="date",
		p_tt_datetime="timestamp",
	)
)

sql(
	"select 'postgres_gurk_file' || %(p_ext)s as postgres_filename_file;",
	args=dict(
		p_ext=".txt",
	)
)

#>>>
p_ext = "txt"
#<<<

{
	"type": "sql",
	"sql": "select 'postgres_gurk_scp' || %(p_ext)s as postgres_filename_scp;",
	"args": {
		"p_ext": ".txt",
		"postgres_filename_scp": var("postgres_filename_scp", str),
	}
}

{
	"type": "file",
	"name": "{postgres_filename_file}",
	"content": b"postgres_gurk_file",
	"mode": 0o644,
}

{
	"type": "scp",
	"name": "{postgres_filename_scp}",
	"content": b"postgres_gurk_scp",
}

procedure(
	"doesnt_exist",
	cond=False,
)

reset_sequence(
	"doesnt_exist",
	table="doesnt_exist",
	field="de_id",
	cond=False,
)

object_exists(
	"pysqltest.pysql_test_procedure"
)

constraint_exists(
	"pysqltest.doesnt_exist"
)

sql(
	"begin doesnt_exist; end;",
	cond=False,
)

file(
	name="doesnt_exist",
	content=b"nothing",
	cond=False,
)

scp(
	name="doesnt_exist",
	content=b"nothing",
	cond=False,
)

disconnect()
