<?xml version='1.0' encoding='iso-8859-1'?>
<doc:section><doc:title>Requirements</doc:title>
To use &xist; you need the following software packages:
<olist>
<item>Python 2.1 (available from <a href="http://www.python.org/">http://www.python.org/</a> and
<a href="http://python.sourceforge.net/">http://python.sourceforge.net/</a>),</item>
<item>The Python &xml; package (available from <a href="http://pyxml.sourceforge.net/">http://pyxml.sourceforge.net/</a>)
(a version that includes sgmlop and expat),</item>
<item>the Python Imaging Library (available from
<a href="http://www.pythonware.com/products/pil/">http://www.pythonware.com/products/pil/</a>)</item>
<item>FileUtils (available from <a href="root:fileutils/index.html">http://www.livinglogic.de/Python/fileutils/</a>),</item>
<item>ANSIStyle (available from <a href="root:ansistyle/index.html">http://www.livinglogic.de/Python/ansistyle/</a>),</item>
<item>and a C compiler supported by <app>distutils</app>, if you want to install
the source distribution.</item>
</olist>
</doc:section>

<doc:section><doc:title>Installation</doc:title>
<doc:para>&xist; uses <app>distutils</app>, so installation
is rather simple. Execute the following command:
<programlisting>
python setup.py install
</programlisting>
This will copy *.py files, compile *.c files and install everything
in the <filename class="directory">site-packages</filename>
directory as an <code>xist</code> package.</doc:para>

<doc:para>For Windows a binary distribution is provided. To install it,
double click it, and follow the instructions.</doc:para>

<doc:para>If you have difficulties installing this software, send a problem report
to Walter Dörwald (<a href="mailto:walter@livinglogic.de">walter@livinglogic.de</a>)
describing the problem.</doc:para>
</doc:section>

<doc:section><doc:title>Character encoding</doc:title>
<doc:para>When you pass an 8bit string in the constructor
of an &xist; element, these strings have to
be converted to Unicode. &xist; assumes that these 8bit strings
are in the system default encoding, which is &ascii;.
If you want to change this you can put a script
named <filename>sitecustomize.py</filename> somewhere
in the Python path, with the following content:
<doc:programlisting>
import sys
sys.setdefaultencoding(<replaceable>"iso-8859-1"</replaceable>)
</doc:programlisting>
(or any other encoding name that you want to use
instead of <code>"iso-8859-1"</code>).</doc:para>
</doc:section>

<doc:section><doc:title>Display hook</doc:title>
<doc:para>
Currently &xist; nodes do not have a fancy <function>__repr__</function>
method implemented, but the <function>repr</function> method
can be used to generate two different display formats (this is extensible
by implementing new presentation classes). To use e.g.
the <code>TreePresenter</code> format in object dumps in
an interactive Python session you can use the displayhook
feature of Python 2.1, simply by putting the following code
into your Python startup script:
<doc:programlisting>
import sys, pprint
from xist import xsc, presenters

def displayhook(object):
	if object is not None:
		if isinstance(object, xsc.Node):
			print object.repr(presenters.TreePresenter())
		else:
			pprint.pprint(object)

sys.displayhook = displayhook
</doc:programlisting>
</doc:para>
</doc:section>

<doc:section><doc:title>Syntax highlighting</doc:title>
<doc:para>If you want syntax highlighting in your &xist; tree
dumps and have an &ansi; color capable terminal, 
set the environment variable <code>XSC_REPRANSI</code>
to <code>1</code> or <code>2</code> depending on whether
you have a light or dark background color. Setting <code>XSC_REPRANSI</code>
to <code>0</code> turns off syntax highlighting.</doc:para>
</doc:section>
